{"version":3,"sources":["webpack:///node_modules/date-fns/esm/lastDayOfISOWeekYear/index.js","webpack:///node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack:///node_modules/date-fns/esm/_lib/assign/index.js","webpack:///node_modules/date-fns/esm/_lib/setUTCDay/index.js","webpack:///node_modules/date-fns/esm/subWeeks/index.js","webpack:///node_modules/date-fns/esm/differenceInCalendarWeeks/index.js","webpack:///node_modules/date-fns/esm/toDate/index.js","webpack:///node_modules/date-fns/esm/_lib/toInteger/index.js","webpack:///node_modules/date-fns/esm/formatRFC3339/index.js","webpack:///node_modules/date-fns/esm/isExists/index.js","webpack:///node_modules/date-fns/esm/eachDayOfInterval/index.js","webpack:///node_modules/date-fns/esm/startOfToday/index.js","webpack:///node_modules/date-fns/esm/getHours/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack:///node_modules/date-fns/esm/startOfMinute/index.js","webpack:///node_modules/date-fns/esm/formatDistanceStrict/index.js","webpack:///node_modules/date-fns/esm/differenceInWeeks/index.js","webpack:///node_modules/date-fns/esm/startOfISOWeekYear/index.js","webpack:///node_modules/date-fns/esm/isYesterday/index.js","webpack:///node_modules/date-fns/esm/startOfISOWeek/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack:///node_modules/date-fns/esm/startOfYear/index.js","webpack:///node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","webpack:///node_modules/date-fns/esm/areIntervalsOverlapping/index.js","webpack:///node_modules/date-fns/esm/eachWeekendOfMonth/index.js","webpack:///node_modules/date-fns/esm/isThisWeek/index.js","webpack:///node_modules/date-fns/esm/_lib/protectedTokens/index.js","webpack:///node_modules/date-fns/esm/getMinutes/index.js","webpack:///node_modules/date-fns/esm/differenceInCalendarQuarters/index.js","webpack:///node_modules/date-fns/esm/differenceInCalendarISOWeekYears/index.js","webpack:///node_modules/date-fns/esm/parseISO/index.js","webpack:///node_modules/date-fns/esm/getMilliseconds/index.js","webpack:///node_modules/date-fns/esm/formatISODuration/index.js","webpack:///node_modules/date-fns/esm/setMinutes/index.js","webpack:///node_modules/date-fns/esm/eachMonthOfInterval/index.js","webpack:///node_modules/date-fns/esm/getISOWeeksInYear/index.js","webpack:///node_modules/date-fns/esm/isWednesday/index.js","webpack:///node_modules/date-fns/esm/getTime/index.js","webpack:///node_modules/date-fns/esm/setDayOfYear/index.js","webpack:///node_modules/date-fns/esm/setYear/index.js","webpack:///node_modules/date-fns/esm/startOfDecade/index.js","webpack:///node_modules/date-fns/esm/setISOWeekYear/index.js","webpack:///node_modules/date-fns/esm/getWeekYear/index.js","webpack:///node_modules/date-fns/esm/sub/index.js","webpack:///node_modules/date-fns/esm/formatDistanceToNow/index.js","webpack:///node_modules/date-fns/esm/addBusinessDays/index.js","webpack:///node_modules/date-fns/esm/lastDayOfDecade/index.js","webpack:///node_modules/date-fns/esm/addDays/index.js","webpack:///node_modules/date-fns/esm/isLeapYear/index.js","webpack:///node_modules/date-fns/esm/startOfMonth/index.js","webpack:///node_modules/date-fns/esm/differenceInCalendarYears/index.js","webpack:///node_modules/date-fns/esm/isThisSecond/index.js","webpack:///node_modules/date-fns/esm/differenceInMonths/index.js","webpack:///node_modules/date-fns/esm/isSameSecond/index.js","webpack:///node_modules/date-fns/esm/getISOWeekYear/index.js","webpack:///node_modules/date-fns/esm/differenceInYears/index.js","webpack:///node_modules/date-fns/esm/addSeconds/index.js","webpack:///node_modules/date-fns/esm/startOfHour/index.js","webpack:///node_modules/date-fns/esm/getDecade/index.js","webpack:///node_modules/date-fns/esm/isMatch/index.js","webpack:///node_modules/date-fns/esm/_lib/format/formatters/index.js","webpack:///node_modules/date-fns/esm/isLastDayOfMonth/index.js","webpack:///node_modules/date-fns/esm/addHours/index.js","webpack:///node_modules/date-fns/esm/getDayOfYear/index.js","webpack:///node_modules/date-fns/esm/isAfter/index.js","webpack:///node_modules/date-fns/esm/eachWeekendOfYear/index.js","webpack:///node_modules/date-fns/esm/_lib/getUTCWeek/index.js","webpack:///node_modules/date-fns/esm/formatDistance/index.js","webpack:///node_modules/date-fns/esm/lastDayOfQuarter/index.js","webpack:///node_modules/date-fns/esm/isSameDay/index.js","webpack:///node_modules/date-fns/esm/addISOWeekYears/index.js","webpack:///node_modules/date-fns/esm/getDay/index.js","webpack:///node_modules/date-fns/esm/endOfYear/index.js","webpack:///node_modules/date-fns/esm/isSaturday/index.js","webpack:///node_modules/date-fns/esm/isThursday/index.js","webpack:///node_modules/date-fns/esm/formatDistanceToNowStrict/index.js","webpack:///node_modules/date-fns/esm/isPast/index.js","webpack:///node_modules/date-fns/esm/differenceInCalendarISOWeeks/index.js","webpack:///node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack:///node_modules/date-fns/esm/endOfMinute/index.js","webpack:///node_modules/date-fns/esm/roundToNearestMinutes/index.js","webpack:///node_modules/date-fns/esm/addMinutes/index.js","webpack:///node_modules/date-fns/esm/_lib/format/longFormatters/index.js","webpack:///node_modules/date-fns/esm/add/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack:///node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///node_modules/date-fns/esm/isSameWeek/index.js","webpack:///node_modules/date-fns/esm/intervalToDuration/index.js","webpack:///node_modules/date-fns/esm/compareAsc/index.js","webpack:///node_modules/date-fns/esm/endOfWeek/index.js","webpack:///node_modules/date-fns/esm/parse/index.js","webpack:///node_modules/date-fns/esm/startOfDay/index.js","webpack:///node_modules/date-fns/esm/isThisMinute/index.js","webpack:///node_modules/date-fns/esm/isThisYear/index.js","webpack:///node_modules/date-fns/esm/getISODay/index.js","webpack:///node_modules/date-fns/esm/differenceInDays/index.js","webpack:///node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack:///node_modules/date-fns/esm/getDaysInMonth/index.js","webpack:///node_modules/date-fns/esm/parseJSON/index.js","webpack:///node_modules/date-fns/esm/endOfSecond/index.js","webpack:///node_modules/date-fns/esm/isTuesday/index.js","webpack:///node_modules/date-fns/esm/setISOWeek/index.js","webpack:///node_modules/date-fns/esm/formatRelative/index.js","webpack:///node_modules/date-fns/esm/endOfDecade/index.js","webpack:///node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack:///node_modules/date-fns/esm/formatISO9075/index.js","webpack:///node_modules/date-fns/esm/fromUnixTime/index.js","webpack:///node_modules/date-fns/esm/setMilliseconds/index.js","webpack:///node_modules/date-fns/esm/parse/_lib/parsers/index.js","webpack:///node_modules/date-fns/esm/lightFormat/index.js","webpack:///node_modules/date-fns/esm/getQuarter/index.js","webpack:///node_modules/date-fns/esm/isValid/index.js","webpack:///node_modules/date-fns/esm/subSeconds/index.js","webpack:///node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","webpack:///node_modules/date-fns/esm/isSameQuarter/index.js","webpack:///node_modules/date-fns/esm/endOfISOWeek/index.js","webpack:///node_modules/date-fns/esm/isToday/index.js","webpack:///node_modules/date-fns/esm/max/index.js","webpack:///node_modules/date-fns/esm/getDate/index.js","webpack:///node_modules/date-fns/esm/isSameISOWeekYear/index.js","webpack:///node_modules/date-fns/esm/eachHourOfInterval/index.js","webpack:///node_modules/date-fns/esm/subQuarters/index.js","webpack:///node_modules/date-fns/esm/formatDuration/index.js","webpack:///node_modules/date-fns/esm/isThisHour/index.js","webpack:///node_modules/date-fns/esm/isFriday/index.js","webpack:///node_modules/date-fns/esm/subBusinessDays/index.js","webpack:///node_modules/date-fns/esm/isThisISOWeek/index.js","webpack:///node_modules/date-fns/esm/isSameMonth/index.js","webpack:///node_modules/date-fns/esm/startOfSecond/index.js","webpack:///node_modules/date-fns/esm/subHours/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack:///node_modules/date-fns/esm/setHours/index.js","webpack:///node_modules/date-fns/esm/setWeek/index.js","webpack:///node_modules/date-fns/esm/subDays/index.js","webpack:///node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","webpack:///node_modules/date-fns/esm/startOfYesterday/index.js","webpack:///node_modules/date-fns/esm/endOfTomorrow/index.js","webpack:///node_modules/date-fns/esm/isWithinInterval/index.js","webpack:///node_modules/date-fns/esm/eachWeekendOfInterval/index.js","webpack:///node_modules/date-fns/esm/subMinutes/index.js","webpack:///node_modules/date-fns/esm/differenceInQuarters/index.js","webpack:///node_modules/date-fns/esm/differenceInBusinessDays/index.js","webpack:///node_modules/date-fns/esm/getSeconds/index.js","webpack:///node_modules/date-fns/esm/startOfWeek/index.js","webpack:///node_modules/date-fns/esm/index.js","webpack:///node_modules/date-fns/esm/endOfYesterday/index.js","webpack:///node_modules/date-fns/esm/endOfISOWeekYear/index.js","webpack:///node_modules/date-fns/esm/formatRFC7231/index.js","webpack:///node_modules/date-fns/esm/formatISO/index.js","webpack:///node_modules/date-fns/esm/getMonth/index.js","webpack:///node_modules/date-fns/esm/eachQuarterOfInterval/index.js","webpack:///node_modules/date-fns/esm/getYear/index.js","webpack:///node_modules/date-fns/esm/addMonths/index.js","webpack:///node_modules/date-fns/esm/eachYearOfInterval/index.js","webpack:///node_modules/date-fns/esm/isBefore/index.js","webpack:///node_modules/date-fns/esm/getWeek/index.js","webpack:///node_modules/date-fns/esm/min/index.js","webpack:///node_modules/date-fns/esm/_lib/cloneObject/index.js","webpack:///node_modules/date-fns/esm/compareDesc/index.js","webpack:///node_modules/date-fns/esm/subMilliseconds/index.js","webpack:///node_modules/date-fns/esm/lastDayOfISOWeek/index.js","webpack:///node_modules/date-fns/esm/lastDayOfWeek/index.js","webpack:///node_modules/date-fns/esm/isWeekend/index.js","webpack:///node_modules/date-fns/esm/set/index.js","webpack:///node_modules/date-fns/esm/differenceInCalendarDays/index.js","webpack:///node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack:///node_modules/date-fns/esm/isSunday/index.js","webpack:///node_modules/date-fns/esm/setISODay/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/index.js","webpack:///node_modules/date-fns/esm/startOfTomorrow/index.js","webpack:///node_modules/date-fns/esm/differenceInMinutes/index.js","webpack:///node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack:///node_modules/date-fns/esm/endOfMonth/index.js","webpack:///node_modules/date-fns/esm/isTomorrow/index.js","webpack:///node_modules/date-fns/esm/isSameYear/index.js","webpack:///node_modules/date-fns/esm/lastDayOfMonth/index.js","webpack:///node_modules/date-fns/esm/getDaysInYear/index.js","webpack:///node_modules/date-fns/esm/getWeekOfMonth/index.js","webpack:///node_modules/date-fns/esm/eachWeekOfInterval/index.js","webpack:///node_modules/date-fns/esm/setDay/index.js","webpack:///node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack:///node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","webpack:///node_modules/date-fns/esm/endOfToday/index.js","webpack:///node_modules/date-fns/esm/differenceInHours/index.js","webpack:///node_modules/date-fns/esm/setMonth/index.js","webpack:///node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack:///node_modules/date-fns/esm/closestTo/index.js","webpack:///node_modules/date-fns/esm/getUnixTime/index.js","webpack:///node_modules/date-fns/esm/isDate/index.js","webpack:///node_modules/date-fns/esm/setWeekYear/index.js","webpack:///node_modules/date-fns/esm/subISOWeekYears/index.js","webpack:///node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","webpack:///node_modules/date-fns/esm/subMonths/index.js","webpack:///node_modules/date-fns/esm/endOfDay/index.js","webpack:///node_modules/date-fns/esm/setQuarter/index.js","webpack:///node_modules/date-fns/esm/addMilliseconds/index.js","webpack:///node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack:///node_modules/date-fns/esm/getWeeksInMonth/index.js","webpack:///node_modules/date-fns/esm/differenceInSeconds/index.js","webpack:///node_modules/date-fns/esm/startOfWeekYear/index.js","webpack:///node_modules/date-fns/esm/endOfQuarter/index.js","webpack:///node_modules/date-fns/esm/isSameISOWeek/index.js","webpack:///node_modules/date-fns/esm/addWeeks/index.js","webpack:///node_modules/date-fns/esm/endOfHour/index.js","webpack:///node_modules/date-fns/esm/isSameMinute/index.js","webpack:///node_modules/date-fns/esm/getISOWeek/index.js","webpack:///node_modules/date-fns/esm/format/index.js","webpack:///node_modules/date-fns/esm/subYears/index.js","webpack:///node_modules/date-fns/esm/setDate/index.js","webpack:///node_modules/date-fns/esm/addQuarters/index.js","webpack:///node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js","webpack:///node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack:///node_modules/date-fns/esm/isThisMonth/index.js","webpack:///node_modules/date-fns/esm/isFuture/index.js","webpack:///node_modules/date-fns/esm/differenceInISOWeekYears/index.js","webpack:///node_modules/date-fns/esm/startOfQuarter/index.js","webpack:///node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack:///node_modules/date-fns/esm/isThisQuarter/index.js","webpack:///node_modules/date-fns/esm/constants/index.js","webpack:///node_modules/date-fns/esm/isFirstDayOfMonth/index.js","webpack:///node_modules/date-fns/esm/lastDayOfYear/index.js","webpack:///node_modules/date-fns/esm/isMonday/index.js","webpack:///node_modules/date-fns/esm/setSeconds/index.js","webpack:///node_modules/date-fns/esm/closestIndexTo/index.js","webpack:///node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack:///node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack:///node_modules/date-fns/esm/_lib/setUTCWeek/index.js","webpack:///node_modules/date-fns/esm/isSameHour/index.js","webpack:///node_modules/date-fns/esm/isEqual/index.js","webpack:///node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack:///node_modules/date-fns/esm/_lib/setUTCISODay/index.js","webpack:///node_modules/date-fns/esm/addYears/index.js"],"names":["lastDayOfISOWeekYear","dirtyDate","arguments","year","fourthOfJanuary","Date","setFullYear","setHours","date","setDate","getDate","addLeadingZeros","number","targetLength","sign","output","Math","abs","toString","length","assign","target","dirtyObject","TypeError","property","hasOwnProperty","setUTCDay","dirtyDay","dirtyOptions","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","day","currentDay","getUTCDay","remainder","dayIndex","diff","setUTCDate","getUTCDate","subWeeks","dirtyAmount","amount","MILLISECONDS_IN_WEEK","differenceInCalendarWeeks","dirtyDateLeft","dirtyDateRight","startOfWeekLeft","startOfWeekRight","timestampLeft","getTime","timestampRight","round","toDate","argument","argStr","Object","prototype","call","console","warn","Error","stack","NaN","toInteger","dirtyNumber","Number","isNaN","ceil","floor","formatRFC3339","concat","originalDate","fractionDigits","month","getMonth","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","fractionalSecond","milliseconds","getMilliseconds","fractionalSeconds","pow","offset","tzOffset","getTimezoneOffset","absoluteOffset","hourOffset","minuteOffset","isExists","eachDayOfInterval","dirtyInterval","interval","startDate","start","endDate","end","endTime","dates","currentDate","step","push","startOfToday","now","hours","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","other","formatRelative","token","_date","_baseDate","_options","startOfMinute","setSeconds","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","formatDistanceStrict","dirtyBaseDate","formatDistance","comparison","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","roundingMethod","String","roundingMethodFn","seconds","offsetInSeconds","minutes","unit","days","months","years","differenceInWeeks","startOfISOWeekYear","isYesterday","startOfISOWeek","formatDistanceLocale","lessThanXSeconds","one","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","count","result","replace","startOfYear","cleanDate","startOfUTCWeek","setUTCHours","areIntervalsOverlapping","dirtyIntervalLeft","dirtyIntervalRight","undefined","intervalLeft","intervalRight","leftStartTime","leftEndTime","rightStartTime","rightEndTime","inclusive","eachWeekendOfMonth","isThisWeek","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","format","input","differenceInCalendarQuarters","yearDiff","quarterDiff","differenceInCalendarISOWeekYears","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","DEFAULT_ADDITIONAL_DIGITS","patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","parseISO","additionalDigits","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","timestamp","time","parseTime","parseTimezone","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","dateString","array","split","timeString","test","substr","exec","regex","RegExp","captures","match","parseInt","century","slice","isWeekDate","dayOfYear","parseDateUnit","week","dayOfWeek","validateWeekDate","dayOfISOWeekYear","validateDate","validateDayOfYearDate","setUTCFullYear","max","value","parseTimeUnit","validateTime","parseFloat","timezoneString","validateTimezone","isoWeekYear","fourthOfJanuaryDay","daysInMonths","isLeapYearIndex","_year","_hours","formatISODuration","duration","_duration$years","_duration$months","_duration$days","_duration$hours","_duration$minutes","_duration$seconds","setMinutes","dirtyMinutes","eachMonthOfInterval","setMonth","getISOWeeksInYear","thisYear","nextYear","valueOf","isWednesday","getDay","setDayOfYear","dirtyDayOfYear","setYear","dirtyYear","startOfDecade","decade","setISOWeekYear","dirtyISOWeekYear","getWeekYear","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","sub","weeks","dateWithoutMonths","dateWithoutDays","minutestoSub","secondstoSub","mstoSub","finalDate","formatDistanceToNow","addBusinessDays","startedOnWeekend","fullWeeks","restDays","lastDayOfDecade","addDays","isLeapYear","startOfMonth","differenceInCalendarYears","isThisSecond","differenceInMonths","difference","isLastMonthNotFull","isSameSecond","dateLeftStartOfSecond","dateRightStartOfSecond","getISOWeekYear","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","differenceInYears","isLastYearNotFull","addSeconds","startOfHour","getDecade","isMatch","formatString","dayPeriodEnum","am","pm","midnight","noon","morning","afternoon","evening","night","formatters","G","localize","era","width","y","signedYear","ordinalNumber","Y","signedWeekYear","weekYear","twoDigitYear","R","u","Q","quarter","context","q","M","L","w","I","isoWeek","d","D","E","e","localDayOfWeek","c","i","isoDayOfWeek","a","dayPeriodEnumValue","dayPeriod","b","B","h","H","K","k","m","s","S","X","_localize","_originalDate","timezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","dirtyDelimiter","absOffset","delimiter","isLastDayOfMonth","addHours","getDayOfYear","isAfter","dirtyDateToCompare","dateToCompare","eachWeekendOfYear","getUTCWeek","MINUTES_IN_ALMOST_TWO_DAYS","MINUTES_IN_TWO_MONTHS","includeSeconds","nearestMonth","monthsSinceStartOfYear","lastDayOfQuarter","currentMonth","isSameDay","dateLeftStartOfDay","dateRightStartOfDay","addISOWeekYears","endOfYear","isSaturday","isThursday","formatDistanceToNowStrict","isPast","differenceInCalendarISOWeeks","startOfISOWeekLeft","startOfISOWeekRight","MILLISECONDS_IN_DAY","getUTCDayOfYear","setUTCMonth","startOfYearTimestamp","endOfMinute","roundToNearestMinutes","nearestTo","roundedMinutes","remainderMinutes","addedMinutes","addMinutes","dateLongFormatter","pattern","formatLong","timeLongFormatter","dateTimeLongFormatter","matchResult","datePattern","timePattern","dateTimeFormat","dateTime","longFormatters","p","P","add","dateWithMonths","dateWithDays","minutesToAdd","secondsToAdd","msToAdd","eraValues","narrow","abbreviated","wide","quarterValues","monthValues","dayValues","dayPeriodValues","formattingDayPeriodValues","_dirtyOptions","rem100","values","defaultWidth","argumentCallback","formattingValues","defaultFormattingWidth","getDateMillisecondsPart","getTimezoneOffsetInMilliseconds","baseTimezoneOffset","hasNegativeUTCOffset","millisecondsPartOfTimezoneOffset","isSameWeek","dateLeftStartOfWeek","dateRightStartOfWeek","intervalToDuration","_ref","remainingMonths","remainingDays","remainingHours","remainingMinutes","remainingSeconds","compareAsc","endOfWeek","TIMEZONE_UNIT_PRIORITY","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","unescapedLatinCharacterRegExp","parse","dirtyDateString","dirtyFormatString","dirtyReferenceDate","subFnOptions","setters","priority","subPriority","set","dateToSystemTimezone","index","tokens","map","substring","firstCharacter","longFormatter","join","usedTokens","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","parser","incompatibleTokens","Array","isArray","incompatibleToken","_i","usedToken","fullToken","parseResult","validate","rest","cleanEscapedString","uniquePrioritySetters","setter","sort","filter","setterArray","utcDate","flags","timestampIsSet","convertedDate","startOfDay","isThisMinute","isThisYear","getISODay","compareLocalAsc","differenceInDays","isLastDayNotFull","differenceInMilliseconds","getDaysInMonth","monthIndex","lastDayOfMonth","parseJSON","parts","UTC","endOfSecond","setMilliseconds","isTuesday","setISOWeek","dirtyISOWeek","baseDate","utcBaseDate","formatStr","endOfDecade","startOfUTCISOWeekYear","formatISO9075","representation","dateDelimiter","timeDelimiter","separator","fromUnixTime","dirtyUnixTime","unixTime","dirtyMilliseconds","MILLISECONDS_IN_SECOND","numericPatterns","hour23h","hour24h","hour11h","hour12h","singleDigit","twoDigits","threeDigits","fourDigits","anyDigitsSigned","singleDigitSigned","twoDigitsSigned","threeDigitsSigned","fourDigitsSigned","timezonePatterns","basicOptionalMinutes","basic","basicOptionalSeconds","extended","extendedOptionalSeconds","parseNumericPattern","string","valueCallback","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","rangeEndCentury","isPreviousCentury","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","parsers","isTwoDigitYear","normalizedTwoDigitYear","_match","_flags","firstWeekOfYear","wholeWeekDays","isPM","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","_token","lightFormat","dirtyFormatStr","formatter","getQuarter","isValid","subSeconds","getUTCWeekYear","isSameQuarter","dateLeftStartOfQuarter","dateRightStartOfQuarter","endOfISOWeek","isToday","dirtyDatesArray","datesArray","forEach","dayOfMonth","isSameISOWeekYear","dateLeftStartOfYear","dateRightStartOfYear","eachHourOfInterval","startTime","subQuarters","defaultFormat","formatDuration","zero","reduce","acc","toUpperCase","addChunk","isThisHour","isFriday","subBusinessDays","isThisISOWeek","isSameMonth","startOfSecond","subHours","matchOrdinalNumberPattern","parseOrdinalNumberPattern","matchEraPatterns","parseEraPatterns","any","matchQuarterPatterns","parseQuarterPatterns","matchMonthPatterns","parseMonthPatterns","matchDayPatterns","parseDayPatterns","matchDayPeriodPatterns","parseDayPeriodPatterns","matchPattern","parsePattern","matchPatterns","defaultMatchWidth","parsePatterns","defaultParseWidth","dirtyHours","setWeek","dirtyWeek","subDays","numberOfDigits","startOfYesterday","endOfTomorrow","isWithinInterval","eachWeekendOfInterval","dateInterval","weekends","subMinutes","differenceInQuarters","differenceInBusinessDays","calendarDifference","startOfWeek","endOfYesterday","endOfISOWeekYear","formatRFC7231","dayName","monthName","formatISO","eachQuarterOfInterval","startDateQuarter","endDateQuarter","quarters","currentQuarter","getYear","addMonths","endOfDesiredMonth","daysInMonth","eachYearOfInterval","isBefore","getWeek","min","cloneObject","compareDesc","subMilliseconds","lastDayOfISOWeek","lastDayOfWeek","isWeekend","differenceInCalendarDays","startOfDayLeft","startOfDayRight","getUTCISOWeekYear","isSunday","setISODay","code","startOfTomorrow","differenceInMinutes","requiredArgs","required","args","endOfMonth","isTomorrow","isSameYear","getDaysInYear","getWeekOfMonth","currentDayOfMonth","startWeekDay","lastDayOfFirstWeek","weekNumber","remainingDaysAfterFirstWeek","eachWeekOfInterval","startDateWeek","endDateWeek","currentWeek","setDay","delta","buildLocalizeFn","dirtyIndex","valuesArray","_defaultWidth","_width","getUTCISOWeek","endOfToday","differenceInHours","dirtyMonth","dateWithDesiredMonth","startOfUTCWeekYear","firstWeek","closestTo","timeToCompare","minDistance","distance","getUnixTime","isDate","setWeekYear","dirtyWeekYear","subISOWeekYears","setUTCISOWeek","subMonths","endOfDay","setQuarter","dirtyQuarter","oldQuarter","addMilliseconds","differenceInCalendarMonths","monthDiff","getWeeksInMonth","differenceInSeconds","startOfWeekYear","endOfQuarter","isSameISOWeek","addWeeks","endOfHour","isSameMinute","dateLeftStartOfMinute","dateRightStartOfMinute","getISOWeek","formatterOptions","subYears","dirtyDayOfMonth","addQuarters","getOverlappingDaysInIntervals","isOverlapping","overlapStartDate","overlapEndDate","differenceInMs","startOfUTCISOWeek","isThisMonth","isFuture","differenceInISOWeekYears","isLastISOWeekYearNotFull","startOfQuarter","buildMatchPatternFn","dirtyString","matchedString","isThisQuarter","maxTime","minTime","isFirstDayOfMonth","lastDayOfYear","isMonday","dirtySeconds","closestIndexTo","buildMatchFn","findIndex","findKey","object","predicate","key","dateFormats","full","medium","timeFormats","dateTimeFormats","formats","setUTCWeek","isSameHour","dateLeftStartOfHour","dateRightStartOfHour","isEqual","dirtyLeftDate","dirtyRightDate","buildFormatLongFn","setUTCISODay","addYears"],"mappings":"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B7U,SAAnB,EAA8B;AAC3C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAIE,IAAI,GAAGK,IAAI,CAACuE,WAAL,EAAX;AACA,YAAIoN,MAAM,GAAGnR,IAAI,CAACwD,KAAL,CAAWrE,IAAI,GAAG,EAAlB,IAAwB,EAArC;AACA,eAAOgS,MAAP;;;;;;;;;;;;;;;;;;AC7BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS4C,OAAT,CAAiBxG,UAAjB,EAA6ByG,YAA7B,EAA2CpT,YAA3C,EAAyD;AACtE,mFAAa,CAAb,EAAgB1B,SAAhB;AACA,eAAO,kEAAQ,gEAAMqO,UAAN,EAAkByG,YAAlB,EAAgC,IAAI3U,IAAJ,EAAhC,EAA4CuB,YAA5C,CAAR,CAAP;;;;;;;;;;;;;;;;;;AC1SF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAOA,UAAIqT,aAAa,GAAG;AAClBC,UAAE,EAAE,IADc;AAElBC,UAAE,EAAE,IAFc;AAGlBC,gBAAQ,EAAE,UAHQ;AAIlBC,YAAI,EAAE,MAJY;AAKlBC,eAAO,EAAE,SALS;AAMlBC,iBAAS,EAAE,WANO;AAOlBC,eAAO,EAAE,SAPS;AAQlBC,aAAK,EAAE;AACP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASga,UAAT,CAAoBva,SAApB,EAA+B;AAC5C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,eAAO,iEAAOD,SAAP,EAAkB4R,MAAlB,OAA+B,CAAtC;;;;;;;;;;;;;;;;;;AC1BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS4I,UAAT,CAAoBxa,SAApB,EAA+B;AAC5C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,eAAO,iEAAOD,SAAP,EAAkB4R,MAAlB,OAA+B,CAAtC;;;;;;;;;;;;;;;;;;AC1BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS6I,yBAAT,CAAmCza,SAAnC,EAA8C2B,YAA9C,EAA4D;AACzE,mFAAa,CAAb,EAAgB1B,SAAhB;AACA,eAAO,+EAAsBD,SAAtB,EAAiCI,IAAI,CAAC0G,GAAL,EAAjC,EAA6CnF,YAA7C,CAAP;;;;;;;;;;;;;;;;;;AC/EF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASmlB,WAAT,CAAqB9vB,SAArB,EAAgC;AAC7C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,eAAOc,IAAI,CAACwD,KAAL,CAAW,kEAAQvE,SAAR,IAAqB,IAAhC,CAAP;;;;;;;;;;;;;;;;;;AC1BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS+vB,MAAT,CAAgBhgB,KAAhB,EAAuB;AACpC,mFAAa,CAAb,EAAgB9P,SAAhB;AACA,eAAO8P,KAAK,YAAY3P,IAAjB,IAAyB,OAAO2P,KAAP,KAAiB,QAAjB,IAA6BrM,MAAM,CAACC,SAAP,CAAiB1C,QAAjB,CAA0B2C,IAA1B,CAA+BmM,KAA/B,MAA0C,eAAvG;;;;;;;;;;;;;;;;;;ACxCF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASigB,WAAT,CAAqBhwB,SAArB,EAAgCiwB,aAAhC,EAA+CtuB,YAA/C,EAA6D;AAC1E,mFAAa,CAAb,EAAgB1B,SAAhB;AACA,YAAI2B,OAAO,GAAGD,YAAY,IAAI,EAA9B;AACA,YAAIE,MAAM,GAAGD,OAAO,CAACC,MAArB;AACA,YAAIyQ,2BAA2B,GAAGzQ,MAAM,IAAIA,MAAM,CAACD,OAAjB,IAA4BC,MAAM,CAACD,OAAP,CAAe2Q,qBAA7E;AACA,YAAIC,4BAA4B,GAAGF,2BAA2B,IAAI,IAA/B,GAAsC,CAAtC,GAA0C,wEAAUA,2BAAV,CAA7E;AACA,YAAIC,qBAAqB,GAAG3Q,OAAO,CAAC2Q,qBAAR,IAAiC,IAAjC,GAAwCC,4BAAxC,GAAuE,wEAAU5Q,OAAO,CAAC2Q,qBAAlB,CAAnG;AACA,YAAIhS,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAImW,QAAQ,GAAG,wEAAU8Z,aAAV,CAAf;AACA,YAAI1tB,IAAI,GAAG,mFAAyBhC,IAAzB,EAA+B,0EAAgBA,IAAhB,EAAsBoB,YAAtB,CAA/B,CAAX;AACA,YAAI8tB,SAAS,GAAG,IAAIrvB,IAAJ,CAAS,CAAT,CAAhB;AACAqvB,iBAAS,CAACpvB,WAAV,CAAsB8V,QAAtB,EAAgC,CAAhC,EAAmC5D,qBAAnC;AACAkd,iBAAS,CAACnvB,QAAV,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;AACAC,YAAI,GAAG,0EAAgBkvB,SAAhB,EAA2B9tB,YAA3B,CAAP;AACApB,YAAI,CAACC,OAAL,CAAaD,IAAI,CAACE,OAAL,KAAiB8B,IAA9B;AACA,eAAOhC,IAAP;;;;;;;;;;;;;;;;;;AClEF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS2vB,eAAT,CAAyBlwB,SAAzB,EAAoC2C,WAApC,EAAiD;AAC9D,mFAAa,CAAb,EAAgB1C,SAAhB;AACA,YAAI2C,MAAM,GAAG,wEAAUD,WAAV,CAAb;AACA,eAAO,0EAAgB3C,SAAhB,EAA2B,CAAC4C,MAA5B,CAAP;;;;;;;;;;;;;;;;;;ACpCF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,c,CAGqD;AACrD;;;AAEe,eAASutB,aAAT,CAAuBnwB,SAAvB,EAAkC+iB,YAAlC,EAAgD;AAC7D,+EAAa,CAAb,EAAgB9iB,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAI+W,OAAO,GAAG,oEAAUgM,YAAV,CAAd;AACA,YAAIxgB,IAAI,GAAG,wEAAchC,IAAd,IAAsBwW,OAAjC;AACAxW,YAAI,CAACiC,UAAL,CAAgBjC,IAAI,CAACkC,UAAL,KAAoBF,IAAI,GAAG,CAA3C;AACA,eAAOhC,IAAP;;;;;;;;;;;;;;;;;;ACZF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS6vB,SAAT,CAAmBpwB,SAAnB,EAA8B2C,WAA9B,EAA2C;AACxD,mFAAa,CAAb,EAAgB1C,SAAhB;AACA,YAAI2C,MAAM,GAAG,wEAAUD,WAAV,CAAb;AACA,eAAO,oEAAU3C,SAAV,EAAqB,CAAC4C,MAAtB,CAAP;;;;;;;;;;;;;;;;;;AC7BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASytB,QAAT,CAAkBrwB,SAAlB,EAA6B;AAC1C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACAO,YAAI,CAACD,QAAL,CAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B;AACA,eAAOC,IAAP;;;;;;;;;;;;;;;;;;AC7BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS+vB,UAAT,CAAoBtwB,SAApB,EAA+BuwB,YAA/B,EAA6C;AAC1D,mFAAa,CAAb,EAAgBtwB,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAIwW,OAAO,GAAG,wEAAU+Z,YAAV,CAAd;AACA,YAAIC,UAAU,GAAGzvB,IAAI,CAACwD,KAAL,CAAWhE,IAAI,CAACsE,QAAL,KAAkB,CAA7B,IAAkC,CAAnD;AACA,YAAItC,IAAI,GAAGiU,OAAO,GAAGga,UAArB;AACA,eAAO,mEAASjwB,IAAT,EAAeA,IAAI,CAACsE,QAAL,KAAkBtC,IAAI,GAAG,CAAxC,CAAP;;;;;;;;;;;;;;;;;;ACjCF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASkuB,eAAT,CAAyBzwB,SAAzB,EAAoC2C,WAApC,EAAiD;AAC9D,mFAAa,CAAb,EAAgB1C,SAAhB;AACA,YAAI2N,SAAS,GAAG,iEAAO5N,SAAP,EAAkBoD,OAAlB,EAAhB;AACA,YAAIR,MAAM,GAAG,wEAAUD,WAAV,CAAb;AACA,eAAO,IAAIvC,IAAJ,CAASwN,SAAS,GAAGhL,MAArB,CAAP;;;;;;;;;;;;;;;;;;AC9BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS8tB,0BAAT,CAAoC3tB,aAApC,EAAmDC,cAAnD,EAAmE;AAChF,mFAAa,CAAb,EAAgB/C,SAAhB;AACA,YAAIuI,QAAQ,GAAG,iEAAOzF,aAAP,CAAf;AACA,YAAI0F,SAAS,GAAG,iEAAOzF,cAAP,CAAhB;AACA,YAAIuJ,QAAQ,GAAG/D,QAAQ,CAAC1D,WAAT,KAAyB2D,SAAS,CAAC3D,WAAV,EAAxC;AACA,YAAI6rB,SAAS,GAAGnoB,QAAQ,CAAC3D,QAAT,KAAsB4D,SAAS,CAAC5D,QAAV,EAAtC;AACA,eAAO0H,QAAQ,GAAG,EAAX,GAAgBokB,SAAvB;;;;;;;;;;;;;;;;;;AClCF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASC,eAAT,CAAyBrwB,IAAzB,EAA+BqB,OAA/B,EAAwC;AACrD,mFAAa,CAAb,EAAgB3B,SAAhB;AACA,eAAO,oFAA0B,yEAAeM,IAAf,CAA1B,EAAgD,uEAAaA,IAAb,CAAhD,EAAoEqB,OAApE,IAA+E,CAAtF;;;;;;;;;;;;;;;;;;ACtCF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASivB,mBAAT,CAA6B9tB,aAA7B,EAA4CC,cAA5C,EAA4D;AACzE,mFAAa,CAAb,EAAgB/C,SAAhB;AACA,YAAIsC,IAAI,GAAG,mFAAyBQ,aAAzB,EAAwCC,cAAxC,IAA0D,IAArE;AACA,eAAOT,IAAI,GAAG,CAAP,GAAWxB,IAAI,CAACwD,KAAL,CAAWhC,IAAX,CAAX,GAA8BxB,IAAI,CAACuD,IAAL,CAAU/B,IAAV,CAArC;;;;;;;;;;;;;;;;;;AChCF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASuuB,eAAT,CAAyB9wB,SAAzB,EAAoC2B,YAApC,EAAkD;AAC/D,mFAAa,CAAb,EAAgB1B,SAAhB;AACA,YAAI2B,OAAO,GAAGD,YAAY,IAAI,EAA9B;AACA,YAAIE,MAAM,GAAGD,OAAO,CAACC,MAArB;AACA,YAAIyQ,2BAA2B,GAAGzQ,MAAM,IAAIA,MAAM,CAACD,OAAjB,IAA4BC,MAAM,CAACD,OAAP,CAAe2Q,qBAA7E;AACA,YAAIC,4BAA4B,GAAGF,2BAA2B,IAAI,IAA/B,GAAsC,CAAtC,GAA0C,wEAAUA,2BAAV,CAA7E;AACA,YAAIC,qBAAqB,GAAG3Q,OAAO,CAAC2Q,qBAAR,IAAiC,IAAjC,GAAwCC,4BAAxC,GAAuE,wEAAU5Q,OAAO,CAAC2Q,qBAAlB,CAAnG;AACA,YAAIrS,IAAI,GAAG,sEAAYF,SAAZ,EAAuB2B,YAAvB,CAAX;AACA,YAAI8tB,SAAS,GAAG,IAAIrvB,IAAJ,CAAS,CAAT,CAAhB;AACAqvB,iBAAS,CAACpvB,WAAV,CAAsBH,IAAtB,EAA4B,CAA5B,EAA+BqS,qBAA/B;AACAkd,iBAAS,CAACnvB,QAAV,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;AACA,YAAIC,IAAI,GAAG,sEAAYkvB,SAAZ,EAAuB9tB,YAAvB,CAAX;AACA,eAAOpB,IAAP;;;;;;;;;;;;;;;;;;AC5DF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASwwB,YAAT,CAAsB/wB,SAAtB,EAAiC;AAC9C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAIia,YAAY,GAAG1Z,IAAI,CAACsE,QAAL,EAAnB;AACA,YAAID,KAAK,GAAGqV,YAAY,GAAGA,YAAY,GAAG,CAA9B,GAAkC,CAA9C;AACA1Z,YAAI,CAAC+Q,QAAL,CAAc1M,KAAd,EAAqB,CAArB;AACArE,YAAI,CAACD,QAAL,CAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B;AACA,eAAOC,IAAP;;;;;;;;;;;;;;;;;;AChCF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASywB,aAAT,CAAuBjuB,aAAvB,EAAsCC,cAAtC,EAAsD;AACnE,mFAAa,CAAb,EAAgB/C,SAAhB;AACA,eAAO,qEAAW8C,aAAX,EAA0BC,cAA1B,EAA0C;AAC/CjB,sBAAY,EAAE;AADiC,SAA1C,CAAP;;;;;;;;;;;;;;;;;;AC7BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASkvB,QAAT,CAAkBjxB,SAAlB,EAA6B2C,WAA7B,EAA0C;AACvD,mFAAa,CAAb,EAAgB1C,SAAhB;AACA,YAAI2C,MAAM,GAAG,wEAAUD,WAAV,CAAb;AACA,YAAIsG,IAAI,GAAGrG,MAAM,GAAG,CAApB;AACA,eAAO,kEAAQ5C,SAAR,EAAmBiJ,IAAnB,CAAP;;;;;;;;;;;;;;;;;;AC9BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASioB,SAAT,CAAmBlxB,SAAnB,EAA8B;AAC3C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACAO,YAAI,CAAC4Q,UAAL,CAAgB,EAAhB,EAAoB,EAApB,EAAwB,GAAxB;AACA,eAAO5Q,IAAP;;;;;;;;;;;;;;;;;;AC7BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS4wB,YAAT,CAAsBpuB,aAAtB,EAAqCC,cAArC,EAAqD;AAClE,mFAAa,CAAb,EAAgB/C,SAAhB;AACA,YAAImxB,qBAAqB,GAAG,wEAAcruB,aAAd,CAA5B;AACA,YAAIsuB,sBAAsB,GAAG,wEAAcruB,cAAd,CAA7B;AACA,eAAOouB,qBAAqB,CAAChuB,OAAtB,OAAoCiuB,sBAAsB,CAACjuB,OAAvB,EAA3C;;;;;;;;;;;;;;;;;;ACjCF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,UAAIP,oBAAoB,GAAG,SAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,eAASyuB,UAAT,CAAoBtxB,SAApB,EAA+B;AAC5C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAIuC,IAAI,GAAG,yEAAehC,IAAf,EAAqB6C,OAArB,KAAiC,6EAAmB7C,IAAnB,EAAyB6C,OAAzB,EAA5C,CAH4C,CAGoC;AAChF;AACA;;AAEA,eAAOrC,IAAI,CAACuC,KAAL,CAAWf,IAAI,GAAGM,oBAAlB,IAA0C,CAAjD;;;;;;;;;;;;;;;;;;ACpCF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,c,CAS0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,UAAIic,sBAAsB,GAAG,uDAA7B,C,CAAsF;AACtF;;AAEA,UAAIC,0BAA0B,GAAG,mCAAjC;AACA,UAAIC,mBAAmB,GAAG,cAA1B;AACA,UAAIC,iBAAiB,GAAG,KAAxB;AACA,UAAIE,6BAA6B,GAAG,UAApe,eAAS/S,MAAT,CAAgBpM,SAAhB,EAA2BmnB,cAA3B,EAA2CxlB,YAA3C,EAAyD;AACtE,mFAAa,CAAb,EAAgB1B,SAAhB;AACA,YAAIijB,SAAS,GAAGva,MAAM,CAACwe,cAAD,CAAtB;AACA,YAAIvlB,OAAO,GAAGD,YAAY,IAAI,EAA9B;AACA,YAAIE,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,8DAA/B;AACA,YAAIyQ,2BAA2B,GAAGzQ,MAAM,CAACD,OAAP,IAAkBC,MAAM,CAACD,OAAP,CAAe2Q,qBAAnE;AACA,YAAIC,4BAA4B,GAAGF,2BAA2B,IAAI,IAA/B,GAAsC,CAAtC,GAA0C,wEAAUA,2BAAV,CAA7E;AACA,YAAIC,qBAAqB,GAAG3Q,OAAO,CAAC2Q,qBAAR,IAAiC,IAAjC,GAAwCC,4BAAxC,GAAuE,wEAAU5Q,OAAO,CAAC2Q,qBAAlB,CAAnG,CAPsE,CAOuE;;AAE7I,YAAI,EAAEA,qBAAqB,IAAI,CAAzB,IAA8BA,qBAAqB,IAAI,CAAzD,CAAJ,EAAiE;AAC/D,gBAAM,IAAItQ,UAAJ,CAAe,2DAAf,CAAN;AACD;;AAED,YAAIH,kBAAkB,GAAGD,MAAM,CAACD,OAAP,IAAkBC,MAAM,CAACD,OAAP,CAAeG,YAA1D;AACA,YAAIC,mBAAmB,GAAGF,kBAAkB,IAAI,IAAtB,GAA6B,CAA7B,GAAiC,wEAAUA,kBAAV,CAA3D;AACA,YAAIC,YAAY,GAAGH,OAAO,CAACG,YAAR,IAAwB,IAAxB,GAA+BC,mBAA/B,GAAqD,wEAAUJ,OAAO,CAACG,YAAlB,CAAxE,CAfsE,CAemC;;AAEzG,YAAI,EAAEA,YAAY,IAAI,CAAhB,IAAqBA,YAAY,IAAI,CAAvC,CAAJ,EAA+C;AAC7C,gBAAM,IAAIE,UAAJ,CAAe,kDAAf,CAAN;AACD;;AAED,YAAI,CAACJ,MAAM,CAAC8T,QAAZ,EAAsB;AACpB,gBAAM,IAAI1T,UAAJ,CAAe,uCAAf,CAAN;AACD;;AAED,YAAI,CAACJ,MAAM,CAAC8Z,UAAZ,EAAwB;AACtB,gBAAM,IAAI1Z,UAAJ,CAAe,yCAAf,CAAN;AACD;;AAED,YAAIyC,YAAY,GAAG,iEAAO1E,SAAP,CAAnB;;AAEA,YAAI,CAAC,kEAAQ0E,YAAR,CAAL,EAA4B;AAC1B,gBAAM,IAAIzC,UAAJ,CAAe,oBAAf,CAAN;AACD,SAjCqE,CAiCpE;AACF;AACA;;;AAGA,YAAIsW,cAAc,GAAG,8FAAgC7T,YAAhC,CAArB;AACA,YAAI+c,OAAO,GAAG,0EAAgB/c,YAAhB,EAA8B6T,cAA9B,CAAd;AACA,YAAIgZ,gBAAgB,GAAG;AACrBhf,+BAAqB,EAAEA,qBADF;AAErBxQ,sBAAY,EAAEA,YAFO;AAGrBF,gBAAM,EAAEA,MAHa;AAIrByW,uBAAa,EAAE5T;AAJM,SAAvB;AAMA,YAAIiG,MAAM,GAAGuY,SAAS,CAAClU,KAAV,CAAgB+P,0BAAhB,EAA4CiB,GAA5C,CAAgD,UAAUC,SAAV,EAAqB;AAChF,cAAIC,cAAc,GAAGD,SAAS,CAAC,CAAD,CAA9B;;AAEA,cAAIC,cAAc,KAAK,GAAnB,IAA0BA,cAAc,KAAK,GAAjD,EAAsD;AACpD,gBAAIC,aAAa,GAAG,4EAAeD,cAAf,CAApB;AACA,mBAAOC,aAAa,CAACF,SAAD,EAAYpe,MAAM,CAAC8Z,UAAnB,EAA+B4V,gBAA/B,CAApB;AACD;;AAED,iBAAOtR,SAAP;AACD,SATY,EASVG,IATU,CASL,EATK,EASDpR,KATC,CASK8P,sBATL,EAS6BkB,GAT7B,CASiC,UAAUC,SAAV,EAAqB;AACjE;AACA,cAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB,mBAAO,GAAP;AACD;;AAED,cAAIC,cAAc,GAAGD,SAAS,CAAC,CAAD,CAA9B;;AAEA,cAAIC,cAAc,KAAK,GAAvB,EAA4B;AAC1B,mBAAOiB,kBAAkB,CAAClB,SAAD,CAAzB;AACD;;AAED,cAAImH,SAAS,GAAG,wEAAWlH,cAAX,CAAhB;;AAEA,cAAIkH,SAAJ,EAAe;AACb,gBAAI,CAACxlB,OAAO,CAAC0e,2BAAT,IAAwC,+FAAyBL,SAAzB,CAA5C,EAAiF;AAC/E,wGAAoBA,SAApB,EAA+BkH,cAA/B,EAA+CnnB,SAA/C;AACD;;AAED,gBAAI,CAAC4B,OAAO,CAAC2e,4BAAT,IAAyC,gGAA0BN,SAA1B,CAA7C,EAAmF;AACjF,wGAAoBA,SAApB,EAA+BkH,cAA/B,EAA+CnnB,SAA/C;AACD;;AAED,mBAAOonB,SAAS,CAAC3F,OAAD,EAAUxB,SAAV,EAAqBpe,MAAM,CAAC8T,QAA5B,EAAsC4b,gBAAtC,CAAhB;AACD;;AAED,cAAIrR,cAAc,CAAClR,KAAf,CAAqBmQ,6BAArB,CAAJ,EAAyD;AACvD,kBAAM,IAAIld,UAAJ,CAAe,mEAAmEie,cAAnE,GAAoF,GAAnG,CAAN;AACD;;AAED,iBAAOD,SAAP;AACD,SAxCY,EAwCVG,IAxCU,CAwCL,EAxCK,CAAb;AAyCA,eAAOzV,MAAP;AACD;;AAED,eAASwW,kBAAT,CAA4B9U,KAA5B,EAAmC;AACjC,eAAOA,KAAK,CAAC2C,KAAN,CAAYgQ,mBAAZ,EAAiC,CAAjC,EAAoCpU,OAApC,CAA4CqU,iBAA5C,EAA+D,GAA/D,CAAP;;;;;;;;;;;;;;;;;;AC7aF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASuS,QAAT,CAAkBxxB,SAAlB,EAA6B2C,WAA7B,EAA0C;AACvD,mFAAa,CAAb,EAAgB1C,SAAhB;AACA,YAAI2C,MAAM,GAAG,wEAAUD,WAAV,CAAb;AACA,eAAO,mEAAS3C,SAAT,EAAoB,CAAC4C,MAArB,CAAP;;;;;;;;;;;;;;;;;;AC7BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASpC,OAAT,CAAiBR,SAAjB,EAA4ByxB,eAA5B,EAA6C;AAC1D,mFAAa,CAAb,EAAgBxxB,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAIioB,UAAU,GAAG,wEAAUwJ,eAAV,CAAjB;AACAlxB,YAAI,CAACC,OAAL,CAAaynB,UAAb;AACA,eAAO1nB,IAAP;;;;;;;;;;;;;;;;;;AC/BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASmxB,WAAT,CAAqB1xB,SAArB,EAAgC2C,WAAhC,EAA6C;AAC1D,mFAAa,CAAb,EAAgB1C,SAAhB;AACA,YAAI2C,MAAM,GAAG,wEAAUD,WAAV,CAAb;AACA,YAAIuG,MAAM,GAAGtG,MAAM,GAAG,CAAtB;AACA,eAAO,oEAAU5C,SAAV,EAAqBkJ,MAArB,CAAP;;;;;;;;;;;;;;;;;;AC9BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEA,UAAI4R,mBAAmB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,eAAS6W,6BAAT,CAAuCzmB,iBAAvC,EAA0DC,kBAA1D,EAA8E;AAC3F,mFAAa,CAAb,EAAgBlL,SAAhB;AACA,YAAIoL,YAAY,GAAGH,iBAAiB,IAAI,EAAxC;AACA,YAAII,aAAa,GAAGH,kBAAkB,IAAI,EAA1C;AACA,YAAII,aAAa,GAAG,iEAAOF,YAAY,CAAChF,KAApB,EAA2BjD,OAA3B,EAApB;AACA,YAAIoI,WAAW,GAAG,iEAAOH,YAAY,CAAC9E,GAApB,EAAyBnD,OAAzB,EAAlB;AACA,YAAIqI,cAAc,GAAG,iEAAOH,aAAa,CAACjF,KAArB,EAA4BjD,OAA5B,EAArB;AACA,YAAIsI,YAAY,GAAG,iEAAOJ,aAAa,CAAC/E,GAArB,EAA0BnD,OAA1B,EAAnB,CAP2F,CAOnC;;AAExD,YAAI,EAAEmI,aAAa,IAAIC,WAAjB,IAAgCC,cAAc,IAAIC,YAApD,CAAJ,EAAuE;AACrE,gBAAM,IAAIzJ,UAAJ,CAAe,kBAAf,CAAN;AACD;;AAED,YAAI2vB,aAAa,GAAGrmB,aAAa,GAAGG,YAAhB,IAAgCD,cAAc,GAAGD,WAArE;;AAEA,YAAI,CAAComB,aAAL,EAAoB;AAClB,iBAAO,CAAP;AACD;;AAED,YAAIC,gBAAgB,GAAGpmB,cAAc,GAAGF,aAAjB,GAAiCA,aAAjC,GAAiDE,cAAxE;AACA,YAAIqmB,cAAc,GAAGpmB,YAAY,GAAGF,WAAf,GAA6BA,WAA7B,GAA2CE,YAAhE;AACA,YAAIqmB,cAAc,GAAGD,cAAc,GAAGD,gBAAtC;AACA,eAAO9wB,IAAI,CAACuD,IAAL,CAAUytB,cAAc,GAAGjX,mBAA3B,CAAP;;;;;;;;;;;;;;;;;;AC3FF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,c,CACqD;AACrD;;;AAEe,eAASkX,iBAAT,CAA2BhyB,SAA3B,EAAsC;AACnD,+EAAa,CAAb,EAAgBC,SAAhB;AACA,YAAI8B,YAAY,GAAG,CAAnB;AACA,YAAIxB,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAIkC,GAAG,GAAG3B,IAAI,CAAC6B,SAAL,EAAV;AACA,YAAIG,IAAI,GAAG,CAACL,GAAG,GAAGH,YAAN,GAAqB,CAArB,GAAyB,CAA1B,IAA+BG,GAA/B,GAAqCH,YAAhD;AACAxB,YAAI,CAACiC,UAAL,CAAgBjC,IAAI,CAACkC,UAAL,KAAoBF,IAApC;AACAhC,YAAI,CAACyK,WAAL,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACA,eAAOzK,IAAP;;;;;;;;;;;;;;;;;;ACZF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS0xB,WAAT,CAAqBjyB,SAArB,EAAgC;AAC7C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,eAAO,sEAAYG,IAAI,CAAC0G,GAAL,EAAZ,EAAwB9G,SAAxB,CAAP;;;;;;;;;;;;;;;;;;AC9BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASkyB,QAAT,CAAkBlyB,SAAlB,EAA6B;AAC1C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,eAAO,iEAAOD,SAAP,EAAkBoD,OAAlB,KAA8BhD,IAAI,CAAC0G,GAAL,EAArC;;;;;;;;;;;;;;;;;;AC9BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASqrB,wBAAT,CAAkCpvB,aAAlC,EAAiDC,cAAjD,EAAiE;AAC9E,mFAAa,CAAb,EAAgB/C,SAAhB;AACA,YAAIuI,QAAQ,GAAG,iEAAOzF,aAAP,CAAf;AACA,YAAI0F,SAAS,GAAG,iEAAOzF,cAAP,CAAhB;AACA,YAAInC,IAAI,GAAG,qEAAW2H,QAAX,EAAqBC,SAArB,CAAX;AACA,YAAIwL,UAAU,GAAGlT,IAAI,CAACC,GAAL,CAAS,2FAAiCwH,QAAjC,EAA2CC,SAA3C,CAAT,CAAjB;AACAD,gBAAQ,GAAG,0EAAgBA,QAAhB,EAA0B3H,IAAI,GAAGoT,UAAjC,CAAX,CAN8E,CAMrB;AACzD;AACA;;AAEA,YAAIme,wBAAwB,GAAG,qEAAW5pB,QAAX,EAAqBC,SAArB,MAAoC,CAAC5H,IAApE;AACA,YAAI8J,MAAM,GAAG9J,IAAI,IAAIoT,UAAU,GAAGme,wBAAjB,CAAjB,CAX8E,CAWjB;;AAE7D,eAAOznB,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA1B;;;;;;;;;;;;;;;;;;ACnDF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS0nB,cAAT,CAAwBryB,SAAxB,EAAmC;AAChD,mFAAa,CAAb,EAAgBC,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAIia,YAAY,GAAG1Z,IAAI,CAACsE,QAAL,EAAnB;AACA,YAAID,KAAK,GAAGqV,YAAY,GAAGA,YAAY,GAAG,CAA1C;AACA1Z,YAAI,CAAC+Q,QAAL,CAAc1M,KAAd,EAAqB,CAArB;AACArE,YAAI,CAACD,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,eAAOC,IAAP;;;;;;;;;;;;;;;;;;AChCF;AAAA;;;AAAA;AAAA;AAAA;;AAAe,eAAS+xB,mBAAT,CAA6BzE,IAA7B,EAAmC;AAChD,eAAO,UAAU0E,WAAV,EAAuB5wB,YAAvB,EAAqC;AAC1C,cAAIyjB,MAAM,GAAGzc,MAAM,CAAC4pB,WAAD,CAAnB;AACA,cAAI3wB,OAAO,GAAGD,YAAY,IAAI,EAA9B;AACA,cAAIma,WAAW,GAAGsJ,MAAM,CAACpW,KAAP,CAAa6e,IAAI,CAAC1D,YAAlB,CAAlB;;AAEA,cAAI,CAACrO,WAAL,EAAkB;AAChB,mBAAO,IAAP;AACD;;AAED,cAAI0W,aAAa,GAAG1W,WAAW,CAAC,CAAD,CAA/B;AACA,cAAIkF,WAAW,GAAGoE,MAAM,CAACpW,KAAP,CAAa6e,IAAI,CAACzD,YAAlB,CAAlB;;AAEA,cAAI,CAACpJ,WAAL,EAAkB;AAChB,mBAAO,IAAP;AACD;;AAED,cAAIjR,KAAK,GAAG8d,IAAI,CAACxI,aAAL,GAAqBwI,IAAI,CAACxI,aAAL,CAAmBrE,WAAW,CAAC,CAAD,CAA9B,CAArB,GAA0DA,WAAW,CAAC,CAAD,CAAjF;AACAjR,eAAK,GAAGnO,OAAO,CAACyjB,aAAR,GAAwBzjB,OAAO,CAACyjB,aAAR,CAAsBtV,KAAtB,CAAxB,GAAuDA,KAA/D;AACA,iBAAO;AACLA,iBAAK,EAAEA,KADF;AAELmR,gBAAI,EAAEkE,MAAM,CAACjW,KAAP,CAAaqjB,aAAa,CAACtxB,MAA3B;AAFD,WAAP;AAID,SAtBD;;;;;;;;;;;;;;;;;;ACDF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASuxB,aAAT,CAAuBzyB,SAAvB,EAAkC;AAC/C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,eAAO,wEAAcG,IAAI,CAAC0G,GAAL,EAAd,EAA0B9G,SAA1B,CAAP;;;;;;;;;;;;;;;;;;AC9BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACO,UAAI0yB,OAAO,GAAG3xB,IAAI,CAAC0E,GAAL,CAAS,EAAT,EAAa,CAAb,IAAkB,EAAlB,GAAuB,EAAvB,GAA4B,EAA5B,GAAiC,IAA/C;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO,UAAIktB,OAAO,GAAG,CAACD,OAAf;;;;;;;;;;;;;;;;ACdP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASE,iBAAT,CAA2B5yB,SAA3B,EAAsC;AACnD,mFAAa,CAAb,EAAgBC,SAAhB;AACA,eAAO,iEAAOD,SAAP,EAAkBS,OAAlB,OAAgC,CAAvC;;;;;;;;;;;;;;;;;;AC1BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASoyB,aAAT,CAAuB7yB,SAAvB,EAAkC;AAC/C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAIE,IAAI,GAAGK,IAAI,CAACuE,WAAL,EAAX;AACAvE,YAAI,CAACF,WAAL,CAAiBH,IAAI,GAAG,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;AACAK,YAAI,CAACD,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,eAAOC,IAAP;;;;;;;;;;;;;;;;;;AC/BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASuyB,QAAT,CAAkB9yB,SAAlB,EAA6B;AAC1C,mFAAa,CAAb,EAAgBC,SAAhB;AACA,eAAO,iEAAOD,SAAP,EAAkB4R,MAAlB,OAA+B,CAAtC;;;;;;;;;;;;;;;;;;AC1BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS/J,UAAT,CAAoB7H,SAApB,EAA+B+yB,YAA/B,EAA6C;AAC1D,mFAAa,CAAb,EAAgB9yB,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAI6I,OAAO,GAAG,wEAAUkqB,YAAV,CAAd;AACAxyB,YAAI,CAACsH,UAAL,CAAgBgB,OAAhB;AACA,eAAOtI,IAAP;;;;;;;;;;;;;;;;;;AC/BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASyyB,cAAT,CAAwBzZ,kBAAxB,EAA4CuO,eAA5C,EAA6D;AAC1E,mFAAa,CAAb,EAAgB7nB,SAAhB;AACA,YAAIuZ,aAAa,GAAG,iEAAOD,kBAAP,CAApB;;AAEA,YAAIlV,KAAK,CAACmV,aAAD,CAAT,EAA0B;AACxB,iBAAOvV,GAAP;AACD;;AAED,YAAI0rB,aAAa,GAAGnW,aAAa,CAACpW,OAAd,EAApB;AACA,YAAI2kB,UAAJ,CAT0E,CAS1D;;AAEhB,YAAID,eAAe,IAAI,IAAvB,EAA6B;AAC3BC,oBAAU,GAAG,EAAb,CAD2B,CACV;AAClB,SAFD,MAEO,IAAI,OAAOD,eAAe,CAACE,OAAvB,KAAmC,UAAvC,EAAmD;AACxDD,oBAAU,GAAGD,eAAb,CADwD,CAC1B;AAC/B,SAFM,MAEA;AACLC,oBAAU,GAAGrH,KAAK,CAAC/c,SAAN,CAAgBwL,KAAhB,CAAsBvL,IAAtB,CAA2BkkB,eAA3B,CAAb;AACD;;AAED,YAAInd,MAAJ;AACA,YAAIilB,WAAJ;AACA7H,kBAAU,CAACC,OAAX,CAAmB,UAAUhoB,SAAV,EAAqB8f,KAArB,EAA4B;AAC7C,cAAIpZ,WAAW,GAAG,iEAAO1G,SAAP,CAAlB;;AAEA,cAAIqE,KAAK,CAACqC,WAAD,CAAT,EAAwB;AACtBiE,kBAAM,GAAG1G,GAAT;AACA2rB,uBAAW,GAAG3rB,GAAd;AACA;AACD;;AAED,cAAI4rB,QAAQ,GAAG9uB,IAAI,CAACC,GAAL,CAAS2uB,aAAa,GAAGjpB,WAAW,CAACtD,OAAZ,EAAzB,CAAf;;AAEA,cAAIuH,MAAM,IAAI,IAAV,IAAkBklB,QAAQ,GAAGD,WAAjC,EAA8C;AAC5CjlB,kBAAM,GAAGmV,KAAT;AACA8P,uBAAW,GAAGC,QAAd;AACD;AACF,SAfD;AAgBA,eAAOllB,MAAP;;;;;;;;;;;;;;;;;;ACvEF;AAAA;;;AAAA;AAAA;AAAA;;AAAe,eAASsoB,YAAT,CAAsBpF,IAAtB,EAA4B;AACzC,eAAO,UAAU0E,WAAV,EAAuB5wB,YAAvB,EAAqC;AAC1C,cAAIyjB,MAAM,GAAGzc,MAAM,CAAC4pB,WAAD,CAAnB;AACA,cAAI3wB,OAAO,GAAGD,YAAY,IAAI,EAA9B;AACA,cAAIkU,KAAK,GAAGjU,OAAO,CAACiU,KAApB;AACA,cAAIsU,YAAY,GAAGtU,KAAK,IAAIgY,IAAI,CAACxD,aAAL,CAAmBxU,KAAnB,CAAT,IAAsCgY,IAAI,CAACxD,aAAL,CAAmBwD,IAAI,CAACvD,iBAAxB,CAAzD;AACA,cAAIxO,WAAW,GAAGsJ,MAAM,CAACpW,KAAP,CAAamb,YAAb,CAAlB;;AAEA,cAAI,CAACrO,WAAL,EAAkB;AAChB,mBAAO,IAAP;AACD;;AAED,cAAI0W,aAAa,GAAG1W,WAAW,CAAC,CAAD,CAA/B;AACA,cAAIyO,aAAa,GAAG1U,KAAK,IAAIgY,IAAI,CAACtD,aAAL,CAAmB1U,KAAnB,CAAT,IAAsCgY,IAAI,CAACtD,aAAL,CAAmBsD,IAAI,CAACrD,iBAAxB,CAA1D;AACA,cAAIza,KAAJ;;AAEA,cAAIrM,MAAM,CAACC,SAAP,CAAiB1C,QAAjB,CAA0B2C,IAA1B,CAA+B2mB,aAA/B,MAAkD,gBAAtD,EAAwE;AACtExa,iBAAK,GAAGmjB,SAAS,CAAC3I,aAAD,EAAgB,UAAU7O,OAAV,EAAmB;AAClD,qBAAOA,OAAO,CAAChN,IAAR,CAAa8jB,aAAb,CAAP;AACD,aAFgB,CAAjB;AAGD,WAJD,MAIO;AACLziB,iBAAK,GAAGojB,OAAO,CAAC5I,aAAD,EAAgB,UAAU7O,OAAV,EAAmB;AAChD,qBAAOA,OAAO,CAAChN,IAAR,CAAa8jB,aAAb,CAAP;AACD,aAFc,CAAf;AAGD;;AAEDziB,eAAK,GAAG8d,IAAI,CAACxI,aAAL,GAAqBwI,IAAI,CAACxI,aAAL,CAAmBtV,KAAnB,CAArB,GAAiDA,KAAzD;AACAA,eAAK,GAAGnO,OAAO,CAACyjB,aAAR,GAAwBzjB,OAAO,CAACyjB,aAAR,CAAsBtV,KAAtB,CAAxB,GAAuDA,KAA/D;AACA,iBAAO;AACLA,iBAAK,EAAEA,KADF;AAELmR,gBAAI,EAAEkE,MAAM,CAACjW,KAAP,CAAaqjB,aAAa,CAACtxB,MAA3B;AAFD,WAAP;AAID,SA/BD;AAgCD;;AAED,eAASiyB,OAAT,CAAiBC,MAAjB,EAAyBC,SAAzB,EAAoC;AAClC,aAAK,IAAIC,GAAT,IAAgBF,MAAhB,EAAwB;AACtB,cAAIA,MAAM,CAAC5xB,cAAP,CAAsB8xB,GAAtB,KAA8BD,SAAS,CAACD,MAAM,CAACE,GAAD,CAAP,CAA3C,EAA0D;AACxD,mBAAOA,GAAP;AACD;AACF;AACF;;AAED,eAASJ,SAAT,CAAmB3kB,KAAnB,EAA0B8kB,SAA1B,EAAqC;AACnC,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG/kB,KAAK,CAACrN,MAA9B,EAAsCoyB,GAAG,EAAzC,EAA6C;AAC3C,cAAID,SAAS,CAAC9kB,KAAK,CAAC+kB,GAAD,CAAN,CAAb,EAA2B;AACzB,mBAAOA,GAAP;AACD;AACF;;;;;;;;;;;;;;;;;;AChDH;AAAA;;;AAAA;AAAA;AAAA;;AACA,UAAIC,WAAW,GAAG;AAChBC,YAAI,EAAE,kBADU;AAEhB,gBAAM,YAFU;AAGhBC,cAAM,EAAE,UAHQ;AAIhB,iBAAO;AAJS,OAAlB;AAMA,UAAIC,WAAW,GAAG;AAChBF,YAAI,EAAE,gBADU;AAEhB,gBAAM,aAFU;AAGhBC,cAAM,EAAE,WAHQ;AAIhB,iBAAO;AAJS,OAAlB;AAMA,UAAIE,eAAe,GAAG;AACpBH,YAAI,EAAE,wBADc;AAEpB,gBAAM,wBAFc;AAGpBC,cAAM,EAAE,oBAHY;AAIpB,iBAAO;AAJa,OAAtB;AAMA,UAAI9X,UAAU,GAAG;AACfpb,YAAI,EAAE,gFAAkB;AACtBqzB,iBAAO,EAAEL,WADa;AAEtB/V,sBAAY,EAAE;AAFQ,SAAlB,CADS;AAKf3P,YAAI,EAAE,gFAAkB;AACtB+lB,iBAAO,EAAEF,WADa;AAEtBlW,sBAAY,EAAE;AAFQ,SAAlB,CALS;AASftB,gBAAQ,EAAE,gFAAkB;AAC1B0X,iBAAO,EAAED,eADiB;AAE1BnW,sBAAY,EAAE;AAFY,SAAlB;AATK,OAAjB;AAce;;AAAA,uCAAA7B,UAAA;;;;;;;;;;;;;;;;ACjCf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,c,CAGqD;AACrD;;;AAEe,eAASkY,UAAT,CAAoB7zB,SAApB,EAA+B2qB,SAA/B,EAA0C/oB,OAA1C,EAAmD;AAChE,+EAAa,CAAb,EAAgB3B,SAAhB;AACA,YAAIM,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAIuP,IAAI,GAAG,oEAAUob,SAAV,CAAX;AACA,YAAIpoB,IAAI,GAAG,qEAAWhC,IAAX,EAAiBqB,OAAjB,IAA4B2N,IAAvC;AACAhP,YAAI,CAACiC,UAAL,CAAgBjC,IAAI,CAACkC,UAAL,KAAoBF,IAAI,GAAG,CAA3C;AACA,eAAOhC,IAAP;;;;;;;;;;;;;;;;;;ACZF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAASuzB,UAAT,CAAoB/wB,aAApB,EAAmCC,cAAnC,EAAmD;AAChE,mFAAa,CAAb,EAAgB/C,SAAhB;AACA,YAAI8zB,mBAAmB,GAAG,sEAAYhxB,aAAZ,CAA1B;AACA,YAAIixB,oBAAoB,GAAG,sEAAYhxB,cAAZ,CAA3B;AACA,eAAO+wB,mBAAmB,CAAC3wB,OAApB,OAAkC4wB,oBAAoB,CAAC5wB,OAArB,EAAzC;;;;;;;;;;;;;;;;;;AC7BF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS6wB,OAAT,CAAiBC,aAAjB,EAAgCC,cAAhC,EAAgD;AAC7D,mFAAa,CAAb,EAAgBl0B,SAAhB;AACA,YAAIuI,QAAQ,GAAG,iEAAO0rB,aAAP,CAAf;AACA,YAAIzrB,SAAS,GAAG,iEAAO0rB,cAAP,CAAhB;AACA,eAAO3rB,QAAQ,CAACpF,OAAT,OAAuBqF,SAAS,CAACrF,OAAV,EAA9B;;;;;;;;;;;;;;;;;;AChCF;AAAA;;;AAAA;AAAA;AAAA;;AAAe,eAASgxB,iBAAT,CAA2BvG,IAA3B,EAAiC;AAC9C,eAAO,UAAUlsB,YAAV,EAAwB;AAC7B,cAAIC,OAAO,GAAGD,YAAY,IAAI,EAA9B;AACA,cAAIkU,KAAK,GAAGjU,OAAO,CAACiU,KAAR,GAAgBlN,MAAM,CAAC/G,OAAO,CAACiU,KAAT,CAAtB,GAAwCgY,IAAI,CAACrQ,YAAzD;AACA,cAAIpR,MAAM,GAAGyhB,IAAI,CAAC+F,OAAL,CAAa/d,KAAb,KAAuBgY,IAAI,CAAC+F,OAAL,CAAa/F,IAAI,CAACrQ,YAAlB,CAApC;AACA,iBAAOpR,MAAP;AACD,SALD;;;;;;;;;;;;;;;;;;ACDF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,c,CAEqD;AACrD;;;AAEe,eAASioB,YAAT,CAAsBr0B,SAAtB,EAAiC0B,QAAjC,EAA2C;AACxD,+EAAa,CAAb,EAAgBzB,SAAhB;AACA,YAAIiC,GAAG,GAAG,oEAAUR,QAAV,CAAV;;AAEA,YAAIQ,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB;AACjBA,aAAG,GAAGA,GAAG,GAAG,CAAZ;AACD;;AAED,YAAIH,YAAY,GAAG,CAAnB;AACA,YAAIxB,IAAI,GAAG,iEAAOP,SAAP,CAAX;AACA,YAAImC,UAAU,GAAG5B,IAAI,CAAC6B,SAAL,EAAjB;AACA,YAAIC,SAAS,GAAGH,GAAG,GAAG,CAAtB;AACA,YAAII,QAAQ,GAAG,CAACD,SAAS,GAAG,CAAb,IAAkB,CAAjC;AACA,YAAIE,IAAI,GAAG,CAACD,QAAQ,GAAGP,YAAX,GAA0B,CAA1B,GAA8B,CAA/B,IAAoCG,GAApC,GAA0CC,UAArD;AACA5B,YAAI,CAACiC,UAAL,CAAgBjC,IAAI,CAACkC,UAAL,KAAoBF,IAApC;AACA,eAAOhC,IAAP;;;;;;;;;;;;;;;;;;ACpBF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,eAAS+zB,QAAT,CAAkBt0B,SAAlB,EAA6B2C,WAA7B,EAA0C;AACvD,mFAAa,CAAb,EAAgB1C,SAAhB;AACA,YAAI2C,MAAM,GAAG,wEAAUD,WAAV,CAAb;AACA,eAAO,oEAAU3C,SAAV,EAAqB4C,MAAM,GAAG,EAA9B,CAAP","file":"default~modals-replies-page-replies-page-module~modals-third-person-profile-third-person-profile-mod~a3bc1d59-es5.js","sourcesContent":["import getISOWeekYear from '../getISOWeekYear/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the last day of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the last day of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `lastDayOfISOYear` to `lastDayOfISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of an ISO week-numbering year for 2 July 2005:\n * var result = lastDayOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Sun Jan 01 2006 00:00:00\n */\n\nexport default function lastDayOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year + 1, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  date.setDate(date.getDate() - 1);\n  return date;\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addWeeks from '../addWeeks/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subWeeks\n * @category Week Helpers\n * @summary Subtract the specified number of weeks from the given date.\n *\n * @description\n * Subtract the specified number of weeks from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 4 weeks from 1 September 2014:\n * var result = subWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Aug 04 2014 00:00:00\n */\n\nexport default function subWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addWeeks(dirtyDate, -amount);\n}","import startOfWeek from '../startOfWeek/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);\n  var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toDate from '../toDate/index.js';\nimport isValid from '../isValid/index.js';\nimport addLeadingZeros from '../_lib/addLeadingZeros/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the ISO 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in ISO 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\n *\n * @example\n * // Represent 18 September 2019 in ISO 3339 format:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 3339 format, 2 digits of second fraction:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\n * //=> '2019-09-18T19:00:52.23Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 3339 format, 3 digits of second fraction\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\n * //=> '2019-09-18T19:00:52.234Z'\n */\n\nexport default function formatRFC3339(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var fractionDigits = options.fractionDigits == null ? 0 : toInteger(options.fractionDigits); // Test if fractionDigits is between 0 and 3 _and_ is not NaN\n\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\n  }\n\n  var day = addLeadingZeros(originalDate.getDate(), 2);\n  var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n  var year = originalDate.getFullYear();\n  var hour = addLeadingZeros(originalDate.getHours(), 2);\n  var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getSeconds(), 2);\n  var fractionalSecond = '';\n\n  if (fractionDigits > 0) {\n    var milliseconds = originalDate.getMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = '.' + addLeadingZeros(fractionalSeconds, fractionDigits);\n  }\n\n  var offset = '';\n  var tzOffset = originalDate.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    var absoluteOffset = Math.abs(tzOffset);\n    var hourOffset = addLeadingZeros(toInteger(absoluteOffset / 60), 2);\n    var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    var sign = tzOffset < 0 ? '+' : '-';\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n  } else {\n    offset = 'Z';\n  }\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\n}","/**\n * @name isExists\n * @category Common Helpers\n * @summary Is the given date exists?\n *\n * @description\n * Checks if the given arguments convert to an existing date.\n *\n * @param {Number} year of the date to check\n * @param {Number} month of the date to check\n * @param {Number} day of the date to check\n * @returns {Boolean} the date exists\n * @throws {TypeError} 3 arguments required\n *\n * @example\n * // For the valid date:\n * var result = isExists(2018, 0, 31)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isExists(2018, 1, 31)\n * //=> false\n */\nexport default function isExists(year, month, day) {\n  if (arguments.length < 3) {\n    throw new TypeError('3 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = new Date(year, month, day);\n  return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `eachDay` to `eachDayOfInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   eachDay(new Date(2014, 0, 10), new Date(2014, 0, 20))\n *\n *   // v2.0.0 onward\n *\n *   eachDayOfInterval(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) }\n *   )\n *   ```\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}","import startOfDay from '../startOfDay/index.js';\n/**\n * @name startOfToday\n * @category Day Helpers\n * @summary Return the start of today.\n * @pure false\n *\n * @description\n * Return the start of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of today\n *\n * @example\n * // If today is 6 October 2014:\n * var result = startOfToday()\n * //=> Mon Oct 6 2014 00:00:00\n */\n\nexport default function startOfToday() {\n  return startOfDay(Date.now());\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * var result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nexport default function getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * var result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\n\nexport default function startOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport toDate from '../toDate/index.js';\nimport differenceInSeconds from '../differenceInSeconds/index.js';\nimport cloneObject from '../_lib/cloneObject/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_YEAR = 525600;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(2015, 0, 2),\n *     new Date(2014, 6, 2)\n *   ) //=> '6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(2014, 6, 2),\n *     new Date(2015, 0, 2)\n *   ) //=> '6 months'\n *   ```\n *\n * - `partialMethod` option is renamed to `roundingMethod`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { partialMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { roundingMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *   ```\n *\n * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.\n *\n * - `unit` option now accepts one of the strings:\n *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { unit: 'm' }\n *   )\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { unit: 'minute' }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * var result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * var result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * var result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = roundingMethodFn((seconds - offsetInSeconds) / 60);\n  var unit;\n\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (minutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (minutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(options.unit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(minutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}","import differenceInDays from '../differenceInDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * var result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\n\nexport default function differenceInWeeks(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInDays(dirtyDateLeft, dirtyDateRight) / 7;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import getISOWeekYear from '../getISOWeekYear/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * var result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\n\nexport default function startOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  return date;\n}","import isSameDay from '../isSameDay/index.js';\nimport subDays from '../subDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isYesterday\n * @category Day Helpers\n * @summary Is the given date yesterday?\n * @pure false\n *\n * @description\n * Is the given date yesterday?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is yesterday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?\n * var result = isYesterday(new Date(2014, 9, 5, 14, 0))\n * //=> true\n */\n\nexport default function isYesterday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, subDays(Date.now(), 1));\n}","import startOfWeek from '../startOfWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return startOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   areRangesOverlapping(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   areIntervalsOverlapping(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/types/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.inclusive=false] - whether the comparison is inclusive or not\n * @returns {Boolean} whether the time intervals are overlapping\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\n * )\n * //=> false\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\n\nexport default function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  if (options.inclusive) {\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  }\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}","import eachWeekendOfInterval from '../eachWeekendOfInterval/index.js';\nimport startOfMonth from '../startOfMonth/index.js';\nimport endOfMonth from '../endOfMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachWeekendOfMonth\n * @category Month Helpers\n * @summary List all the Saturdays and Sundays in the given month.\n *\n * @description\n * Get all the Saturdays and Sundays in the given month.\n *\n * @param {Date|Number} date - the given month\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The passed date is invalid\n *\n * @example\n * // Lists all Saturdays and Sundays in the given month\n * var result = eachWeekendOfMonth(new Date(2022, 1, 1))\n * //=> [\n * //   Sat Feb 05 2022 00:00:00,\n * //   Sun Feb 06 2022 00:00:00,\n * //   Sat Feb 12 2022 00:00:00,\n * //   Sun Feb 13 2022 00:00:00,\n * //   Sat Feb 19 2022 00:00:00,\n * //   Sun Feb 20 2022 00:00:00,\n * //   Sat Feb 26 2022 00:00:00,\n * //   Sun Feb 27 2022 00:00:00\n * // ]\n */\n\nexport default function eachWeekendOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var startDate = startOfMonth(dirtyDate);\n  if (isNaN(startDate)) throw new RangeError('The passed date is invalid');\n  var endDate = endOfMonth(dirtyDate);\n  return eachWeekendOfInterval({\n    start: startDate,\n    end: endDate\n  });\n}","import isSameWeek from '../isSameWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisWeek\n * @category Week Helpers\n * @summary Is the given date in the same week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same week as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @param {Object} [options] - the object with options\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the date is in this week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // If today is 25 September 2014, is 21 September 2014 in this week?\n * var result = isThisWeek(new Date(2014, 8, 21))\n * //=> true\n *\n * @example\n * // If today is 25 September 2014 and week starts with Monday\n * // is 21 September 2014 in this week?\n * var result = isThisWeek(new Date(2014, 8, 21), { weekStartsOn: 1 })\n * //=> false\n */\n\nexport default function isThisWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return isSameWeek(dirtyDate, Date.now(), options);\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getMinutes\n * @category Minute Helpers\n * @summary Get the minutes of the given date.\n *\n * @description\n * Get the minutes of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the minutes of 29 February 2012 11:45:05:\n * var result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 45\n */\n\nexport default function getMinutes(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = date.getMinutes();\n  return minutes;\n}","import getQuarter from '../getQuarter/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarQuarters\n * @category Quarter Helpers\n * @summary Get the number of calendar quarters between the given dates.\n *\n * @description\n * Get the number of calendar quarters between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar quarters\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar quarters are between 31 December 2013 and 2 July 2014?\n * var result = differenceInCalendarQuarters(\n *   new Date(2014, 6, 2),\n *   new Date(2013, 11, 31)\n * )\n * //=> 3\n */\n\nexport default function differenceInCalendarQuarters(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var quarterDiff = getQuarter(dateLeft) - getQuarter(dateRight);\n  return yearDiff * 4 + quarterDiff;\n}","import getISOWeekYear from '../getISOWeekYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of calendar ISO week-numbering years between the given dates.\n *\n * @description\n * Get the number of calendar ISO week-numbering years between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `differenceInCalendarISOYears` to `differenceInCalendarISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar ISO week-numbering years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?\n * var result = differenceInCalendarISOWeekYears(\n *   new Date(2012, 0, 1),\n *   new Date(2010, 0, 1)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarISOWeekYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  return getISOWeekYear(dirtyDateLeft) - getISOWeekYear(dirtyDateRight);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate(), dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    result.setFullYear(dirtyDate.getUTCFullYear());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getMilliseconds\n * @category Millisecond Helpers\n * @summary Get the milliseconds of the given date.\n *\n * @description\n * Get the milliseconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the milliseconds of 29 February 2012 11:45:05.123:\n * var result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 123\n */\n\nexport default function getMilliseconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var milliseconds = date.getMilliseconds();\n  return milliseconds;\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name formatISODuration\n * @category Common Helpers\n * @summary Format a duration object according as ISO 8601 duration string\n *\n * @description\n * Format a duration object according to the ISO 8601 duration standard (https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm)\n *\n * @param {Duration} duration - the duration to format\n *\n * @returns {String} The ISO 8601 duration string\n * @throws {TypeError} Requires 1 argument\n * @throws {Error} Argument must be an object\n *\n * @example\n * // Format the given duration as ISO 8601 string\n * formatISODuration({\n *   years: 39,\n *   months: 2,\n *   days: 20,\n *   hours: 7,\n *   minutes: 5,\n *   seconds: 0\n * })\n * //=> 'P39Y2M20DT0H0M0S'\n */\n\nexport default function formatISODuration(duration) {\n  requiredArgs(1, arguments);\n  if (typeof duration !== 'object') throw new Error('Duration must be an object');\n  var _duration$years = duration.years,\n      years = _duration$years === void 0 ? 0 : _duration$years,\n      _duration$months = duration.months,\n      months = _duration$months === void 0 ? 0 : _duration$months,\n      _duration$days = duration.days,\n      days = _duration$days === void 0 ? 0 : _duration$days,\n      _duration$hours = duration.hours,\n      hours = _duration$hours === void 0 ? 0 : _duration$hours,\n      _duration$minutes = duration.minutes,\n      minutes = _duration$minutes === void 0 ? 0 : _duration$minutes,\n      _duration$seconds = duration.seconds,\n      seconds = _duration$seconds === void 0 ? 0 : _duration$seconds;\n  return \"P\".concat(years, \"Y\").concat(months, \"M\").concat(days, \"DT\").concat(hours, \"H\").concat(minutes, \"M\").concat(seconds, \"S\");\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} the array with starts of months from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * var result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\n\nexport default function eachMonthOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n\n  return dates;\n}","import startOfISOWeekYear from '../startOfISOWeekYear/index.js';\nimport addWeeks from '../addWeeks/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeeksInYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * @description\n * Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of ISO weeks in a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many weeks are in ISO week-numbering year 2015?\n * var result = getISOWeeksInYear(new Date(2015, 1, 11))\n * //=> 53\n */\n\nexport default function getISOWeeksInYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var thisYear = startOfISOWeekYear(dirtyDate);\n  var nextYear = startOfISOWeekYear(addWeeks(thisYear, 60));\n  var diff = nextYear.valueOf() - thisYear.valueOf(); // Round the number of weeks to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isWednesday\n * @category Weekday Helpers\n * @summary Is the given date Wednesday?\n *\n * @description\n * Is the given date Wednesday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Wednesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 24 September 2014 Wednesday?\n * var result = isWednesday(new Date(2014, 8, 24))\n * //=> true\n */\n\nexport default function isWednesday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 3;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * var result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setDayOfYear\n * @category Day Helpers\n * @summary Set the day of the year to the given date.\n *\n * @description\n * Set the day of the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} dayOfYear - the day of the year of the new date\n * @returns {Date} the new date with the day of the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd day of the year to 2 July 2014:\n * var result = setDayOfYear(new Date(2014, 6, 2), 2)\n * //=> Thu Jan 02 2014 00:00:00\n */\n\nexport default function setDayOfYear(dirtyDate, dirtyDayOfYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfYear = toInteger(dirtyDayOfYear);\n  date.setMonth(0);\n  date.setDate(dayOfYear);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * var result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nexport default function setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  date.setFullYear(year);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfDecade\n * @category Decade Helpers\n * @summary Return the start of a decade for the given date.\n *\n * @description\n * Return the start of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a decade for 21 October 2015 00:00:00:\n * var result = startOfDecade(new Date(2015, 9, 21, 00, 00, 00))\n * //=> Jan 01 2010 00:00:00\n */\n\nexport default function startOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = Math.floor(year / 10) * 10;\n  date.setFullYear(decade, 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport startOfISOWeekYear from '../startOfISOWeekYear/index.js';\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Set the ISO week-numbering year to the given date.\n *\n * @description\n * Set the ISO week-numbering year to the given date,\n * saving the week number and the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `setISOYear` to `setISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `setWeekYear`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} isoWeekYear - the ISO week-numbering year of the new date\n * @returns {Date} the new date with the ISO week-numbering year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set ISO week-numbering year 2007 to 29 December 2008:\n * var result = setISOWeekYear(new Date(2008, 11, 29), 2007)\n * //=> Mon Jan 01 2007 00:00:00\n */\n\nexport default function setISOWeekYear(dirtyDate, dirtyISOWeekYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeekYear = toInteger(dirtyISOWeekYear);\n  var diff = differenceInCalendarDays(date, startOfISOWeekYear(date));\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(isoWeekYear, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  date = startOfISOWeekYear(fourthOfJanuary);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import startOfWeek from '../startOfWeek/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the local week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * var result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * var result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * var result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\n\nexport default function getWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import subDays from '../subDays/index.js';\nimport subMonths from '../subMonths/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\n/**\n * @name sub\n * @category Common Helpers\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @description\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be subtracted\n *\n * | Key     | Description                        |\n * |---------|------------------------------------|\n * | years   | Amount of years to be subtracted   |\n * | months  | Amount of months to be subtracted  |\n * | weeks   | Amount of weeks to be subtracted   |\n * | days    | Amount of days to be subtracted    |\n * | hours   | Amount of hours to be subtracted   |\n * | minutes | Amount of minutes to be subtracted |\n * | seconds | Amount of seconds to be subtracted |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract the following duration from 15 June 2017 15:29:20\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> Mon Sep 1 2014 10:19:50\n */\n\nexport default function sub(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = 'years' in duration ? toInteger(duration.years) : 0;\n  var months = 'months' in duration ? toInteger(duration.months) : 0;\n  var weeks = 'weeks' in duration ? toInteger(duration.weeks) : 0;\n  var days = 'days' in duration ? toInteger(duration.days) : 0;\n  var hours = 'hours' in duration ? toInteger(duration.hours) : 0;\n  var minutes = 'minutes' in duration ? toInteger(duration.minutes) : 0;\n  var seconds = 'seconds' in duration ? toInteger(duration.seconds) : 0; // Subtract years and months\n\n  var dateWithoutMonths = subMonths(toDate(dirtyDate), months + years * 12); // Subtract weeks and days\n\n  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7); // Subtract hours, minutes and seconds\n\n  var minutestoSub = minutes + hours * 60;\n  var secondstoSub = seconds + minutestoSub * 60;\n  var mstoSub = secondstoSub * 1000;\n  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);\n  return finalDate;\n}","import distanceInWords from '../formatDistance/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsToNow ` to `formatDistanceToNow`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *   ```\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistanceToNow(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), dirtyOptions);\n}","import isWeekend from '../isWeekend/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nimport isSunday from '../isSunday/index.js';\nimport isSaturday from '../isSaturday/index.js';\n/**\n * @name addBusinessDays\n * @category Day Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of business days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the business days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * var result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\n\nexport default function addBusinessDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var startedOnWeekend = isWeekend(date);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) return new Date(NaN);\n  var hours = date.getHours();\n  var sign = amount < 0 ? -1 : 1;\n  var fullWeeks = toInteger(amount / 5);\n  date.setDate(date.getDate() + fullWeeks * 7); // Get remaining days not part of a full week\n\n  var restDays = Math.abs(amount % 5); // Loops over remaining days\n\n  while (restDays > 0) {\n    date.setDate(date.getDate() + sign);\n    if (!isWeekend(date)) restDays -= 1;\n  } // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n\n\n  if (startedOnWeekend && isWeekend(date) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if (isSaturday(date)) date.setDate(date.getDate() + (sign < 0 ? 2 : -1));\n    if (isSunday(date)) date.setDate(date.getDate() + (sign < 0 ? 1 : -2));\n  } // Restore hours to avoid DST lag\n\n\n  date.setHours(hours);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfDecade\n * @category Decade Helpers\n * @summary Return the last day of a decade for the given date.\n *\n * @description\n * Return the last day of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a decade for 21 December 2012 21:12:00:\n * var result = lastDayOfDecade(new Date(2012, 11, 21, 21, 12, 00))\n * //=> Wed Dec 31 2019 00:00:00\n */\n\nexport default function lastDayOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = 9 + Math.floor(year / 10) * 10;\n  date.setFullYear(decade + 1, 0, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isLeapYear\n * @category Year Helpers\n * @summary Is the given date in the leap year?\n *\n * @description\n * Is the given date in the leap year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the leap year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 1 September 2012 in the leap year?\n * var result = isLeapYear(new Date(2012, 8, 1))\n * //=> true\n */\n\nexport default function isLeapYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * var result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import isSameSecond from '../isSameSecond/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisSecond\n * @category Second Helpers\n * @summary Is the given date in the same second as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same second as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:30:15.000 in this second?\n * var result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))\n * //=> true\n */\n\nexport default function isThisSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameSecond(Date.now(), dirtyDate);\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarMonths from '../differenceInCalendarMonths/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastMonthNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import startOfSecond from '../startOfSecond/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameSecond\n * @category Second Helpers\n * @summary Are the given dates in the same second?\n *\n * @description\n * Are the given dates in the same second?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same second\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500\n * // in the same second?\n * var result = isSameSecond(\n *   new Date(2014, 8, 4, 6, 30, 15),\n *   new Date(2014, 8, 4, 6, 30, 15, 500)\n * )\n * //=> true\n */\n\nexport default function isSameSecond(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfSecond = startOfSecond(dirtyDateLeft);\n  var dateRightStartOfSecond = startOfSecond(dirtyDateRight);\n  return dateLeftStartOfSecond.getTime() === dateRightStartOfSecond.getTime();\n}","import toDate from '../toDate/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getISOYear` to `getISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * var result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\n\nexport default function getISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarYears from '../differenceInCalendarYears/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * var result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear('1584');\n  dateRight.setFullYear('1584'); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastYearNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * var result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\n\nexport default function addSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * 1000);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * var result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDecade\n * @category Decade Helpers\n * @summary Get the decade of the given date.\n *\n * @description\n * Get the decade of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year of decade\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which decade belongs 27 November 1942?\n * var result = getDecade(new Date(1942, 10, 27))\n * //=> 1940\n */\n\nexport default function getDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = Math.floor(year / 10) * 10;\n  return decade;\n}","import parse from '../parse/index.js';\nimport isValid from '../isValid/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isMatch\n * @category Common Helpers\n * @summary validates the date string against given formats\n *\n * @description\n * Return the true if given date is string correct against the given format else\n * will return false.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * isMatch('23 AM', 'HH a')\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `isMatch` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `isMatch` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `isMatch` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `isMatch('50', 'yy') //=> true`\n *\n *    `isMatch('75', 'yy') //=> true`\n *\n *    while `uu` will use the year as is:\n *\n *    `isMatch('50', 'uu') //=> true`\n *\n *    `isMatch('75', 'uu') //=> true`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be checked in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are matched (e.g. when matching string 'January 1st' without a year),\n * the values will be taken from today's using `new Date()` date which works as a context of parsing.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n *\n *\n * @param {String} dateString - the date string to verify\n * @param {String} formatString - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Boolean}\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Match 11 February 2014 from middle-endian format:\n * var result = isMatch('02/11/2014', 'MM/dd/yyyy')\n * //=> true\n *\n * @example\n * // Match 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = isMatch('28-a de februaro', \"do 'de' MMMM\", {\n *   locale: eo\n * })\n * //=> true\n */\n\nexport default function isMatch(dateString, formatString, dirtyOptions) {\n  requiredArgs(2, arguments);\n  return isValid(parse(dateString, formatString, new Date(), dirtyOptions));\n}","import lightFormatters from '../lightFormatters/index.js';\nimport getUTCDayOfYear from '../../../_lib/getUTCDayOfYear/index.js';\nimport getUTCISOWeek from '../../../_lib/getUTCISOWeek/index.js';\nimport getUTCISOWeekYear from '../../../_lib/getUTCISOWeekYear/index.js';\nimport getUTCWeek from '../../../_lib/getUTCWeek/index.js';\nimport getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport addLeadingZeros from '../../addLeadingZeros/index.js';\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n   * |  d  | Day of month                   |  D  | Day of year                    |\n   * |  e  | Local day of week              |  E  | Day of week                    |\n   * |  f  |                                |  F* | Day of week in month           |\n   * |  g* | Modified Julian day            |  G  | Era                            |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  i! | ISO day of week                |  I! | ISO week of year               |\n   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n   * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  n  |                                |  N  |                                |\n   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n   * |  p! | Long localized time            |  P! | Long localized date            |\n   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n   * |  u  | Extended year                  |  U* | Cyclic year                    |\n   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n   * |  w  | Local week of year             |  W* | Week of month                  |\n   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   *\n   * Letters marked by ! are non-standard, but implemented by date-fns:\n   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n   *   i.e. 7 for Sunday, 1 for Monday, etc.\n   * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n   *   `R` is supposed to be used in conjunction with `I` and `i`\n   *   for universal ISO week-numbering date, whereas\n   *   `Y` is supposed to be used in conjunction with `w` and `e`\n   *   for week-numbering date specific to the locale.\n   * - `P` is long localized date format\n   * - `p` is long localized time format\n   */\n\n};\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import toDate from '../toDate/index.js';\nimport endOfDay from '../endOfDay/index.js';\nimport endOfMonth from '../endOfMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * var result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\n\nexport default function addHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);\n}","import toDate from '../toDate/index.js';\nimport startOfYear from '../startOfYear/index.js';\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * var result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\n\nexport default function getDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = differenceInCalendarDays(date, startOfYear(date));\n  var dayOfYear = diff + 1;\n  return dayOfYear;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import eachWeekendOfInterval from '../eachWeekendOfInterval/index.js';\nimport startOfYear from '../startOfYear/index.js';\nimport endOfYear from '../endOfYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachWeekendOfYear\n * @category Year Helpers\n * @summary List all the Saturdays and Sundays in the year.\n *\n * @description\n * Get all the Saturdays and Sundays in the year.\n *\n * @param {Date|Number} date - the given year\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The passed date is invalid\n *\n * @example\n * // Lists all Saturdays and Sundays in the year\n * var result = eachWeekendOfYear(new Date(2020, 1, 1))\n * //=> [\n * //   Sat Jan 03 2020 00:00:00,\n * //   Sun Jan 04 2020 00:00:00,\n * //   ...\n * //   Sun Dec 27 2020 00:00:00\n * // ]\n * ]\n */\n\nexport default function eachWeekendOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var startDate = startOfYear(dirtyDate);\n  if (isNaN(startDate)) throw new RangeError('The passed date is invalid');\n  var endDate = endOfYear(dirtyDate);\n  return eachWeekendOfInterval({\n    start: startDate,\n    end: endDate\n  });\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport startOfUTCWeekYear from '../startOfUTCWeekYear/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import compareAsc from '../compareAsc/index.js';\nimport differenceInMonths from '../differenceInMonths/index.js';\nimport differenceInSeconds from '../differenceInSeconds/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport toDate from '../toDate/index.js';\nimport cloneObject from '../_lib/cloneObject/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * var result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfQuarter\n * @category Quarter Helpers\n * @summary Return the last day of a year quarter for the given date.\n *\n * @description\n * Return the last day of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the last day of a quarter\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // The last day of a quarter for 2 September 2014 11:55:00:\n * var result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function lastDayOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3 + 3;\n  date.setMonth(month, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import toInteger from '../_lib/toInteger/index.js';\nimport getISOWeekYear from '../getISOWeekYear/index.js';\nimport setISOWeekYear from '../setISOWeekYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Add the specified number of ISO week-numbering years to the given date.\n *\n * @description\n * Add the specified number of ISO week-numbering years to the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `addISOYears` to `addISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of ISO week-numbering years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the ISO week-numbering years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 ISO week-numbering years to 2 July 2010:\n * var result = addISOWeekYears(new Date(2010, 6, 2), 5)\n * //=> Fri Jun 26 2015 00:00:00\n */\n\nexport default function addISOWeekYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return setISOWeekYear(dirtyDate, getISOWeekYear(dirtyDate) + amount);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * var result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\n\nexport default function getDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\n\nexport default function endOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSaturday\n * @category Weekday Helpers\n * @summary Is the given date Saturday?\n *\n * @description\n * Is the given date Saturday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Saturday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 27 September 2014 Saturday?\n * var result = isSaturday(new Date(2014, 8, 27))\n * //=> true\n */\n\nexport default function isSaturday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 6;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThursday\n * @category Weekday Helpers\n * @summary Is the given date Thursday?\n *\n * @description\n * Is the given date Thursday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Thursday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 25 September 2014 Thursday?\n * var result = isThursday(new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isThursday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 4;\n}","import distanceInStrictWords from '../formatDistanceStrict/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name formatDistanceToNowStrict\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNowStrict(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNowStrict(\n *   new Date(2015, 0, 1, 0, 0, 15)\n * )\n * //=> '20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in 1 year'\n *\n * @example\n * // If today is 28 January 2015,\n * // what is the distance to 1 January 2015, in months, rounded up??\n * var result = formatDistanceToNowStrict(new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNowStrict(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceToNowStrict(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return distanceInStrictWords(dirtyDate, Date.now(), dirtyOptions);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isPast\n * @category Common Helpers\n * @summary Is the given date in the past?\n * @pure false\n *\n * @description\n * Is the given date in the past?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the past\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 2 July 2014 in the past?\n * var result = isPast(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isPast(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() < Date.now();\n}","import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar ISO weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * var result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6)\n * )\n * //=> 3\n */\n\nexport default function differenceInCalendarISOWeeks(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfISOWeekLeft = startOfISOWeek(dirtyDateLeft);\n  var startOfISOWeekRight = startOfISOWeek(dirtyDateRight);\n  var timestampLeft = startOfISOWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);\n  var timestampRight = startOfISOWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfISOWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK);\n}","import toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfMinute\n * @category Minute Helpers\n * @summary Return the end of a minute for the given date.\n *\n * @description\n * Return the end of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a minute for 1 December 2014 22:15:45.400:\n * var result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:59.999\n */\n\nexport default function endOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to round\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.nearestTo=1] - nearest number of minutes to round to. E.g. `15` to round to quarter hours.\n * @returns {Date} the new date rounded to the closest minute\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.nearestTo` must be between 1 and 30\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * var result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:07:30 to nearest quarter hour:\n * var result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * // rounds up because given date is exactly between 12:00:00 and 12:15:00\n * //=> Thu Jul 10 2014 12:15:00\n */\n\nexport default function roundToNearestMinutes(dirtyDate, options) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only none provided present');\n  }\n\n  var nearestTo = options && 'nearestTo' in options ? toInteger(options.nearestTo) : 1;\n\n  if (nearestTo < 1 || nearestTo > 30) {\n    throw new RangeError('`options.nearestTo` must be between 1 and 30');\n  }\n\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds(); // relevant if nearestTo is 1, which is the default case\n\n  var minutes = date.getMinutes() + seconds / 60;\n  var roundedMinutes = Math.floor(minutes / nearestTo) * nearestTo;\n  var remainderMinutes = minutes % nearestTo;\n  var addedMinutes = Math.round(remainderMinutes / nearestTo) * nearestTo;\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), roundedMinutes + addedMinutes);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * var result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","import addDays from '../addDays/index.js';\nimport addMonths from '../addMonths/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added       |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * var result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\n\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = 'years' in duration ? toInteger(duration.years) : 0;\n  var months = 'months' in duration ? toInteger(duration.months) : 0;\n  var weeks = 'weeks' in duration ? toInteger(duration.weeks) : 0;\n  var days = 'days' in duration ? toInteger(duration.days) : 0;\n  var hours = 'hours' in duration ? toInteger(duration.hours) : 0;\n  var minutes = 'minutes' in duration ? toInteger(duration.minutes) : 0;\n  var seconds = 'seconds' in duration ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import buildLocalizeFn from '../../../_lib/buildLocalizeFn/index.js';\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n};\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","var MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","import startOfWeek from '../startOfWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameWeek\n * @category Week Helpers\n * @summary Are the given dates in the same week?\n *\n * @description\n * Are the given dates in the same week?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Boolean} the dates are in the same week\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Are 31 August 2014 and 4 September 2014 in the same week?\n * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\n * //=> true\n *\n * @example\n * // If week starts with Monday,\n * // are 31 August 2014 and 4 September 2014 in the same week?\n * var result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\n *   weekStartsOn: 1\n * })\n * //=> false\n */\n\nexport default function isSameWeek(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfWeek = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var dateRightStartOfWeek = startOfWeek(dirtyDateRight, dirtyOptions);\n  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();\n}","import compareAsc from '../compareAsc/index.js';\nimport differenceInYears from '../differenceInYears/index.js';\nimport differenceInMonths from '../differenceInMonths/index.js';\nimport differenceInDays from '../differenceInDays/index.js';\nimport differenceInHours from '../differenceInHours/index.js';\nimport differenceInMinutes from '../differenceInMinutes/index.js';\nimport differenceInSeconds from '../differenceInSeconds/index.js';\nimport isValid from '../isValid/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nimport toDate from '../toDate/index.js';\nimport sub from '../sub/index.js';\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(_ref) {\n  var start = _ref.start,\n      end = _ref.end;\n  requiredArgs(1, arguments);\n  var dateLeft = toDate(start);\n  var dateRight = toDate(end);\n\n  if (!isValid(dateLeft)) {\n    throw new RangeError('Start Date is invalid');\n  }\n\n  if (!isValid(dateRight)) {\n    throw new RangeError('End Date is invalid');\n  }\n\n  var duration = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  };\n  var sign = compareAsc(dateLeft, dateRight);\n  duration.years = Math.abs(differenceInYears(dateLeft, dateRight));\n  var remainingMonths = sub(dateLeft, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(remainingMonths, dateRight));\n  var remainingDays = sub(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(remainingDays, dateRight));\n  var remainingHours = sub(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(remainingHours, dateRight));\n  var remainingMinutes = sub(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(remainingMinutes, dateRight));\n  var remainingSeconds = sub(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(remainingSeconds, dateRight));\n  return duration;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\n\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport assign from '../_lib/assign/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport parsers from './_lib/parsers/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   toDate('2016-01-01')\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale // If timezone isn't specified, it will be set to the system timezone\n\n  };\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import isSameMinute from '../isSameMinute/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisMinute\n * @category Minute Helpers\n * @summary Is the given date in the same minute as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same minute as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:30:00 in this minute?\n * var result = isThisMinute(new Date(2014, 8, 25, 18, 30))\n * //=> true\n */\n\nexport default function isThisMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameMinute(Date.now(), dirtyDate);\n}","import isSameYear from '../isSameYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisYear\n * @category Year Helpers\n * @summary Is the given date in the same year as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same year as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 2 July 2014 in this year?\n * var result = isThisYear(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isThisYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameYear(dirtyDate, Date.now());\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * var result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\n\nexport default function getISODay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n\n  if (day === 0) {\n    day = 7;\n  }\n\n  return day;\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js'; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * var result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = compareLocalAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * var result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getTime() - dateRight.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * var result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name parseJSON\n * @category Common Helpers\n * @summary Parse a JSON date string\n *\n * @description\n * Converts a complete ISO date string in UTC time, the typical format for transmitting\n * a date in JSON, to a JavaScript `Date` instance.\n *\n * This is a minimal implementation for converting dates retrieved from a JSON API to\n * a `Date` instance which can be used with other functions in the `date-fns` library.\n * The following formats are supported:\n *\n * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\n * - `2000-03-15T05:20:10Z`: Without milliseconds\n * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\n * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\n * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\n * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds\n * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting\n *\n * For convenience and ease of use these other input types are also supported\n * via [toDate]{@link https://date-fns.org/docs/toDate}:\n *\n * - A `Date` instance will be cloned\n * - A `number` will be treated as a timestamp\n *\n * Any other input type or invalid date strings will return an `Invalid Date`.\n *\n * @param {String|Number|Date} argument A fully formed ISO8601 date string to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n */\n\nexport default function parseJSON(argument) {\n  requiredArgs(1, arguments);\n\n  if (typeof argument === 'string') {\n    var parts = argument.match(/(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,7}))?(?:Z|\\+00:?00)?/);\n\n    if (parts) {\n      return new Date(Date.UTC(+parts[1], parts[2] - 1, +parts[3], +parts[4], +parts[5], +parts[6], +((parts[7] || '0') + '00').substring(0, 3)));\n    }\n\n    return new Date(NaN);\n  }\n\n  return toDate(argument);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfSecond\n * @category Second Helpers\n * @summary Return the end of a second for the given date.\n *\n * @description\n * Return the end of a second for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a second for 1 December 2014 22:15:45.400:\n * var result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.999\n */\n\nexport default function endOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isTuesday\n * @category Weekday Helpers\n * @summary Is the given date Tuesday?\n *\n * @description\n * Is the given date Tuesday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Tuesday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 23 September 2014 Tuesday?\n * var result = isTuesday(new Date(2014, 8, 23))\n * //=> true\n */\n\nexport default function isTuesday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 2;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport getISOWeek from '../getISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} isoWeek - the ISO week of the new date\n * @returns {Date} the new date with the ISO week set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * var result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\n\nexport default function setISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getISOWeek(date) - isoWeek;\n  date.setDate(date.getDate() - diff * 7);\n  return date;\n}","import differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport format from '../format/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to format\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {String} the date in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.locale` must contain `formatRelative` property\n */\n\nexport default function formatRelative(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var baseDate = toDate(dirtyBaseDate);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  if (!locale.formatRelative) {\n    throw new RangeError('locale must contain formatRelative property');\n  }\n\n  var diff = differenceInCalendarDays(date, baseDate);\n\n  if (isNaN(diff)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var token;\n\n  if (diff < -6) {\n    token = 'other';\n  } else if (diff < -1) {\n    token = 'lastWeek';\n  } else if (diff < 0) {\n    token = 'yesterday';\n  } else if (diff < 1) {\n    token = 'today';\n  } else if (diff < 2) {\n    token = 'tomorrow';\n  } else if (diff < 7) {\n    token = 'nextWeek';\n  } else {\n    token = 'other';\n  }\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var utcBaseDate = subMilliseconds(baseDate, getTimezoneOffsetInMilliseconds(baseDate));\n  var formatStr = locale.formatRelative(token, utcDate, utcBaseDate, options);\n  return format(date, formatStr, options);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfDecade\n * @category Decade Helpers\n * @summary Return the end of a decade for the given date.\n *\n * @description\n * Return the end of a decade for the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a decade\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // The end of a decade for 12 May 1984 00:00:00:\n * var result = endOfDecade(new Date(1984, 4, 12, 00, 00, 00))\n * //=> Dec 31 1989 23:59:59.999\n */\n\nexport default function endOfDecade(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var decade = 9 + Math.floor(year / 10) * 10;\n  date.setFullYear(decade, 11, 31);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import getUTCISOWeekYear from '../getUTCISOWeekYear/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport isValid from '../isValid/index.js';\nimport addLeadingZeros from '../_lib/addLeadingZeros/index.js';\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\n\nexport default function formatISO9075(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    var separator = result === '' ? '' : ' '; // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\n  }\n\n  return result;\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Number} unixTime - the given Unix timestamp\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * var result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMilliseconds\n * @category Millisecond Helpers\n * @summary Set the milliseconds to the given date.\n *\n * @description\n * Set the milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} milliseconds - the milliseconds of the new date\n * @returns {Date} the new date with the milliseconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 300 milliseconds to 1 September 2014 11:30:40.500:\n * var result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)\n * //=> Mon Sep 01 2014 11:30:40.300\n */\n\nexport default function setMilliseconds(dirtyDate, dirtyMilliseconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var milliseconds = toInteger(dirtyMilliseconds);\n  date.setMilliseconds(milliseconds);\n  return date;\n}","import getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport setUTCDay from '../../../_lib/setUTCDay/index.js';\nimport setUTCISODay from '../../../_lib/setUTCISODay/index.js';\nimport setUTCISOWeek from '../../../_lib/setUTCISOWeek/index.js';\nimport setUTCWeek from '../../../_lib/setUTCWeek/index.js';\nimport startOfUTCISOWeek from '../../../_lib/startOfUTCISOWeek/index.js';\nimport startOfUTCWeek from '../../../_lib/startOfUTCWeek/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import toDate from '../toDate/index.js';\nimport formatters from '../_lib/format/lightFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport isValid from '../isValid/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js'; // This RegExp consists of three parts separated by `|`:\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name lightFormat\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. Unlike `format`,\n * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n *\n * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   |\n * |---------------------------------|---------|-----------------------------------|\n * | AM, PM                          | a..aaa  | AM, PM                            |\n * |                                 | aaaa    | a.m., p.m.                        |\n * |                                 | aaaaa   | a, p                              |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n * |                                 | yy      | 44, 01, 00, 17                    |\n * |                                 | yyy     | 044, 001, 000, 017                |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n * |                                 | MM      | 01, 02, ..., 12                   |\n * | Day of month                    | d       | 1, 2, ..., 31                     |\n * |                                 | dd      | 01, 02, ..., 31                   |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n * |                                 | hh      | 01, 02, ..., 11, 12               |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n * |                                 | HH      | 00, 01, 02, ..., 23               |\n * | Minute                          | m       | 0, 1, ..., 59                     |\n * |                                 | mm      | 00, 01, ..., 59                   |\n * | Second                          | s       | 0, 1, ..., 59                     |\n * |                                 | ss      | 00, 01, ..., 59                   |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |\n * |                                 | SS      | 00, 01, ..., 99                   |\n * |                                 | SSS     | 000, 0001, ..., 999               |\n * |                                 | SSSS    | ...                               |\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * var result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n * //=> '2014-02-11'\n */\n\nexport default function lightFormat(dirtyDate, dirtyFormatStr) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var result = formatStr.match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      return formatter(utcDate, substring, null, {});\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getQuarter\n * @category Quarter Helpers\n * @summary Get the year quarter of the given date.\n *\n * @description\n * Get the year quarter of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which quarter is 2 July 2014?\n * var result = getQuarter(new Date(2014, 6, 2))\n * //=> 3\n */\n\nexport default function getQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = Math.floor(date.getMonth() / 3) + 1;\n  return quarter;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addSeconds from '../addSeconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subSeconds\n * @category Second Helpers\n * @summary Subtract the specified number of seconds from the given date.\n *\n * @description\n * Subtract the specified number of seconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 seconds from 10 July 2014 12:45:00:\n * var result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:44:30\n */\n\nexport default function subSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addSeconds(dirtyDate, -amount);\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import startOfQuarter from '../startOfQuarter/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameQuarter\n * @category Quarter Helpers\n * @summary Are the given dates in the same year quarter?\n *\n * @description\n * Are the given dates in the same year quarter?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same quarter\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 1 January 2014 and 8 March 2014 in the same quarter?\n * var result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))\n * //=> true\n */\n\nexport default function isSameQuarter(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);\n  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);\n  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();\n}","import endOfWeek from '../endOfWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the end of an ISO week for the given date.\n *\n * @description\n * Return the end of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an ISO week for 2 September 2014 11:55:00:\n * var result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Sep 07 2014 23:59:59.999\n */\n\nexport default function endOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return endOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import isSameDay from '../isSameDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\n\nexport default function isToday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, Date.now());\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name max\n * @category Common Helpers\n * @summary Return the latest of the given dates.\n *\n * @description\n * Return the latest of the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - `max` function now accepts an array of dates rather than spread arguments.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   var date1 = new Date(1989, 6, 10)\n *   var date2 = new Date(1987, 1, 11)\n *   var maxDate = max(date1, date2)\n *\n *   // v2.0.0 onward:\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\n *   var maxDate = max(dates)\n *   ```\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} the latest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the latest?\n * var result = max([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Sun Jul 02 1995 00:00:00\n */\n\nexport default function max(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result < currentDate || isNaN(currentDate)) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDate\n * @category Day Helpers\n * @summary Get the day of the month of the given date.\n *\n * @description\n * Get the day of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the month is 29 February 2012?\n * var result = getDate(new Date(2012, 1, 29))\n * //=> 29\n */\n\nexport default function getDate(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = date.getDate();\n  return dayOfMonth;\n}","import startOfISOWeekYear from '../startOfISOWeekYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Are the given dates in the same ISO week-numbering year?\n *\n * @description\n * Are the given dates in the same ISO week-numbering year?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isSameISOYear` to `isSameISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same ISO week-numbering year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\n * var result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\n * //=> true\n */\n\nexport default function isSameISOWeekYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfYear = startOfISOWeekYear(dirtyDateLeft);\n  var dateRightStartOfYear = startOfISOWeekYear(dirtyDateRight);\n  return dateLeftStartOfYear.getTime() === dateRightStartOfYear.getTime();\n}","import addHours from '../addHours/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of hours from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 10 October 2014, 15:00\n * var result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\n\nexport default function eachHourOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setMinutes(0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addHours(currentDate, step);\n  }\n\n  return dates;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addQuarters from '../addQuarters/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subQuarters\n * @category Quarter Helpers\n * @summary Subtract the specified number of year quarters from the given date.\n *\n * @description\n * Subtract the specified number of year quarters from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 3 quarters from 1 September 2014:\n * var result = subQuarters(new Date(2014, 8, 1), 3)\n * //=> Sun Dec 01 2013 00:00:00\n */\n\nexport default function subQuarters(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addQuarters(dirtyDate, -amount);\n}","import defaultLocale from '../locale/en-US/index.js';\nvar defaultFormat = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'];\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @param {Duration} duration - the duration to format\n * @param {Object} [options] - an object with options.\n\n * @param {string[]} [options.format=['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds']] - the array of units to format\n * @param {boolean} [options.zero=false] - should be zeros be included in the output?\n * @param {string} [options.delimiter=' '] - delimiter string\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {string} the formatted date string\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, null, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\n\nexport default function formatDuration(duration) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var format = options.format || defaultFormat;\n  var locale = options.locale || defaultLocale;\n  var zero = options.zero || false;\n  var delimiter = options.delimiter || ' ';\n  var result = format.reduce(function (acc, unit) {\n    var token = \"x\".concat(unit.replace(/(^.)/, function (m) {\n      return m.toUpperCase();\n    }));\n    var addChunk = typeof duration[unit] === 'number' && (zero || duration[unit]);\n    return addChunk ? acc.concat(locale.formatDistance(token, duration[unit])) : acc;\n  }, []).join(delimiter);\n  return result;\n}","import isSameHour from '../isSameHour/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisHour\n * @category Hour Helpers\n * @summary Is the given date in the same hour as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same hour as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If now is 25 September 2014 18:30:15.500,\n * // is 25 September 2014 18:00:00 in this hour?\n * var result = isThisHour(new Date(2014, 8, 25, 18))\n * //=> true\n */\n\nexport default function isThisHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameHour(Date.now(), dirtyDate);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isFriday\n * @category Weekday Helpers\n * @summary Is the given date Friday?\n *\n * @description\n * Is the given date Friday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Friday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 26 September 2014 Friday?\n * var result = isFriday(new Date(2014, 8, 26))\n * //=> true\n */\n\nexport default function isFriday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 5;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addBusinessDays from '../addBusinessDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subBusinessDays\n * @category Day Helpers\n * @summary Substract the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Substract the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of business days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the business days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Substract 10 business days from 1 September 2014:\n * var result = subBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Aug 18 2014 00:00:00 (skipped weekend days)\n */\n\nexport default function subBusinessDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addBusinessDays(dirtyDate, -amount);\n}","import isSameISOWeek from '../isSameISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisISOWeek\n * @category ISO Week Helpers\n * @summary Is the given date in the same ISO week as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same ISO week as the current date?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 22 September 2014 in this ISO week?\n * var result = isThisISOWeek(new Date(2014, 8, 22))\n * //=> true\n */\n\nexport default function isThisISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameISOWeek(dirtyDate, Date.now());\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month?\n *\n * @description\n * Are the given dates in the same month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfSecond\n * @category Second Helpers\n * @summary Return the start of a second for the given date.\n *\n * @description\n * Return the start of a second for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a second for 1 December 2014 22:15:45.400:\n * var result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.000\n */\n\nexport default function startOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(0);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addHours from '../addHours/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * var result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\n\nexport default function subHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addHours(dirtyDate, -amount);\n}","import buildMatchPatternFn from '../../../_lib/buildMatchPatternFn/index.js';\nimport buildMatchFn from '../../../_lib/buildMatchFn/index.js';\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import getWeek from '../getWeek/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} week - the week of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the new date with the local week set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * var result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * var result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\n\nexport default function setWeek(dirtyDate, dirtyWeek, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getWeek(date, dirtyOptions) - week;\n  date.setDate(date.getDate() - diff * 7);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addDays from '../addDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * var result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import addLeadingZeros from '../../addLeadingZeros/index.js';\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","/**\n * @name startOfYesterday\n * @category Day Helpers\n * @summary Return the start of yesterday.\n * @pure false\n *\n * @description\n * Return the start of yesterday.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of yesterday\n *\n * @example\n * // If today is 6 October 2014:\n * var result = startOfYesterday()\n * //=> Sun Oct 5 2014 00:00:00\n */\nexport default function startOfYesterday() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day - 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","/**\n * @name endOfTomorrow\n * @category Day Helpers\n * @summary Return the end of tomorrow.\n * @pure false\n *\n * @description\n * Return the end of tomorrow.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * var result = endOfTomorrow()\n * //=> Tue Oct 7 2014 23:59:59.999\n */\nexport default function endOfTomorrow() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\n\nexport default function isWithinInterval(dirtyDate, dirtyInterval) {\n  requiredArgs(2, arguments);\n  var interval = dirtyInterval || {};\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}","import eachDayOfInterval from '../eachDayOfInterval/index.js';\nimport isSunday from '../isSunday/index.js';\nimport isWeekend from '../isWeekend/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachWeekendOfInterval\n * @category Interval Helpers\n * @summary List all the Saturdays and Sundays in the given date interval.\n *\n * @description\n * Get all the Saturdays and Sundays in the given date interval.\n *\n * @param {Interval} interval - the given interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Lists all Saturdays and Sundays in the given date interval\n * var result = eachWeekendOfInterval({\n *   start: new Date(2018, 8, 17),\n *   end: new Date(2018, 8, 30)\n * })\n * //=> [\n * //   Sat Sep 22 2018 00:00:00,\n * //   Sun Sep 23 2018 00:00:00,\n * //   Sat Sep 29 2018 00:00:00,\n * //   Sun Sep 30 2018 00:00:00\n * // ]\n */\n\nexport default function eachWeekendOfInterval(interval) {\n  requiredArgs(1, arguments);\n  var dateInterval = eachDayOfInterval(interval);\n  var weekends = [];\n  var index = 0;\n\n  while (index < dateInterval.length) {\n    var date = dateInterval[index++];\n\n    if (isWeekend(date)) {\n      weekends.push(date);\n      if (isSunday(date)) index = index + 5;\n    }\n  }\n\n  return weekends;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMinutes from '../addMinutes/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * var result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\n\nexport default function subMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMinutes(dirtyDate, -amount);\n}","import differenceInMonths from '../differenceInMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInQuarters\n * @category Quarter Helpers\n * @summary Get the number of full quarters between the given dates.\n *\n * @description\n * Get the number of full quarters between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full quarters\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\n * var result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\n * //=> 2\n */\n\nexport default function differenceInQuarters(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMonths(dirtyDateLeft, dirtyDateRight) / 3;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import isValid from '../isValid/index.js';\nimport isWeekend from '../isWeekend/index.js';\nimport toDate from '../toDate/index.js';\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport addDays from '../addDays/index.js';\nimport isSameDay from '../isSameDay/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that arent in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of business days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * var result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n */\n\nexport default function differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  if (!isValid(dateLeft) || !isValid(dateRight)) return new Date(NaN);\n  var calendarDifference = differenceInCalendarDays(dateLeft, dateRight);\n  var sign = calendarDifference < 0 ? -1 : 1;\n  var weeks = toInteger(calendarDifference / 7);\n  var result = weeks * 5;\n  dateRight = addDays(dateRight, weeks * 7); // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n\n  while (!isSameDay(dateLeft, dateRight)) {\n    // sign is used to account for both negative and positive differences\n    result += isWeekend(dateRight) ? 0 : sign;\n    dateRight = addDays(dateRight, sign);\n  }\n\n  return result === 0 ? 0 : result;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getSeconds\n * @category Second Helpers\n * @summary Get the seconds of the given date.\n *\n * @description\n * Get the seconds of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the seconds of 29 February 2012 11:45:05.123:\n * var result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 5\n */\n\nexport default function getSeconds(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = date.getSeconds();\n  return seconds;\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","// This file is generated automatically by `scripts/build/indices.js`. Please, don't change it.\nexport { default as add } from './add/index.js';\nexport { default as addBusinessDays } from './addBusinessDays/index.js';\nexport { default as addDays } from './addDays/index.js';\nexport { default as addHours } from './addHours/index.js';\nexport { default as addISOWeekYears } from './addISOWeekYears/index.js';\nexport { default as addMilliseconds } from './addMilliseconds/index.js';\nexport { default as addMinutes } from './addMinutes/index.js';\nexport { default as addMonths } from './addMonths/index.js';\nexport { default as addQuarters } from './addQuarters/index.js';\nexport { default as addSeconds } from './addSeconds/index.js';\nexport { default as addWeeks } from './addWeeks/index.js';\nexport { default as addYears } from './addYears/index.js';\nexport { default as areIntervalsOverlapping } from './areIntervalsOverlapping/index.js';\nexport { default as closestIndexTo } from './closestIndexTo/index.js';\nexport { default as closestTo } from './closestTo/index.js';\nexport { default as compareAsc } from './compareAsc/index.js';\nexport { default as compareDesc } from './compareDesc/index.js';\nexport { default as differenceInBusinessDays } from './differenceInBusinessDays/index.js';\nexport { default as differenceInCalendarDays } from './differenceInCalendarDays/index.js';\nexport { default as differenceInCalendarISOWeekYears } from './differenceInCalendarISOWeekYears/index.js';\nexport { default as differenceInCalendarISOWeeks } from './differenceInCalendarISOWeeks/index.js';\nexport { default as differenceInCalendarMonths } from './differenceInCalendarMonths/index.js';\nexport { default as differenceInCalendarQuarters } from './differenceInCalendarQuarters/index.js';\nexport { default as differenceInCalendarWeeks } from './differenceInCalendarWeeks/index.js';\nexport { default as differenceInCalendarYears } from './differenceInCalendarYears/index.js';\nexport { default as differenceInDays } from './differenceInDays/index.js';\nexport { default as differenceInHours } from './differenceInHours/index.js';\nexport { default as differenceInISOWeekYears } from './differenceInISOWeekYears/index.js';\nexport { default as differenceInMilliseconds } from './differenceInMilliseconds/index.js';\nexport { default as differenceInMinutes } from './differenceInMinutes/index.js';\nexport { default as differenceInMonths } from './differenceInMonths/index.js';\nexport { default as differenceInQuarters } from './differenceInQuarters/index.js';\nexport { default as differenceInSeconds } from './differenceInSeconds/index.js';\nexport { default as differenceInWeeks } from './differenceInWeeks/index.js';\nexport { default as differenceInYears } from './differenceInYears/index.js';\nexport { default as eachDayOfInterval } from './eachDayOfInterval/index.js';\nexport { default as eachHourOfInterval } from './eachHourOfInterval/index.js';\nexport { default as eachMonthOfInterval } from './eachMonthOfInterval/index.js';\nexport { default as eachQuarterOfInterval } from './eachQuarterOfInterval/index.js';\nexport { default as eachWeekOfInterval } from './eachWeekOfInterval/index.js';\nexport { default as eachWeekendOfInterval } from './eachWeekendOfInterval/index.js';\nexport { default as eachWeekendOfMonth } from './eachWeekendOfMonth/index.js';\nexport { default as eachWeekendOfYear } from './eachWeekendOfYear/index.js';\nexport { default as eachYearOfInterval } from './eachYearOfInterval/index.js';\nexport { default as endOfDay } from './endOfDay/index.js';\nexport { default as endOfDecade } from './endOfDecade/index.js';\nexport { default as endOfHour } from './endOfHour/index.js';\nexport { default as endOfISOWeek } from './endOfISOWeek/index.js';\nexport { default as endOfISOWeekYear } from './endOfISOWeekYear/index.js';\nexport { default as endOfMinute } from './endOfMinute/index.js';\nexport { default as endOfMonth } from './endOfMonth/index.js';\nexport { default as endOfQuarter } from './endOfQuarter/index.js';\nexport { default as endOfSecond } from './endOfSecond/index.js';\nexport { default as endOfToday } from './endOfToday/index.js';\nexport { default as endOfTomorrow } from './endOfTomorrow/index.js';\nexport { default as endOfWeek } from './endOfWeek/index.js';\nexport { default as endOfYear } from './endOfYear/index.js';\nexport { default as endOfYesterday } from './endOfYesterday/index.js';\nexport { default as format } from './format/index.js';\nexport { default as formatDistance } from './formatDistance/index.js';\nexport { default as formatDistanceStrict } from './formatDistanceStrict/index.js';\nexport { default as formatDistanceToNow } from './formatDistanceToNow/index.js';\nexport { default as formatDistanceToNowStrict } from './formatDistanceToNowStrict/index.js';\nexport { default as formatDuration } from './formatDuration/index.js';\nexport { default as formatISO } from './formatISO/index.js';\nexport { default as formatISO9075 } from './formatISO9075/index.js';\nexport { default as formatISODuration } from './formatISODuration/index.js';\nexport { default as formatRFC3339 } from './formatRFC3339/index.js';\nexport { default as formatRFC7231 } from './formatRFC7231/index.js';\nexport { default as formatRelative } from './formatRelative/index.js';\nexport { default as fromUnixTime } from './fromUnixTime/index.js';\nexport { default as getDate } from './getDate/index.js';\nexport { default as getDay } from './getDay/index.js';\nexport { default as getDayOfYear } from './getDayOfYear/index.js';\nexport { default as getDaysInMonth } from './getDaysInMonth/index.js';\nexport { default as getDaysInYear } from './getDaysInYear/index.js';\nexport { default as getDecade } from './getDecade/index.js';\nexport { default as getHours } from './getHours/index.js';\nexport { default as getISODay } from './getISODay/index.js';\nexport { default as getISOWeek } from './getISOWeek/index.js';\nexport { default as getISOWeekYear } from './getISOWeekYear/index.js';\nexport { default as getISOWeeksInYear } from './getISOWeeksInYear/index.js';\nexport { default as getMilliseconds } from './getMilliseconds/index.js';\nexport { default as getMinutes } from './getMinutes/index.js';\nexport { default as getMonth } from './getMonth/index.js';\nexport { default as getOverlappingDaysInIntervals } from './getOverlappingDaysInIntervals/index.js';\nexport { default as getQuarter } from './getQuarter/index.js';\nexport { default as getSeconds } from './getSeconds/index.js';\nexport { default as getTime } from './getTime/index.js';\nexport { default as getUnixTime } from './getUnixTime/index.js';\nexport { default as getWeek } from './getWeek/index.js';\nexport { default as getWeekOfMonth } from './getWeekOfMonth/index.js';\nexport { default as getWeekYear } from './getWeekYear/index.js';\nexport { default as getWeeksInMonth } from './getWeeksInMonth/index.js';\nexport { default as getYear } from './getYear/index.js';\nexport { default as intervalToDuration } from './intervalToDuration/index.js';\nexport { default as isAfter } from './isAfter/index.js';\nexport { default as isBefore } from './isBefore/index.js';\nexport { default as isDate } from './isDate/index.js';\nexport { default as isEqual } from './isEqual/index.js';\nexport { default as isExists } from './isExists/index.js';\nexport { default as isFirstDayOfMonth } from './isFirstDayOfMonth/index.js';\nexport { default as isFriday } from './isFriday/index.js';\nexport { default as isFuture } from './isFuture/index.js';\nexport { default as isLastDayOfMonth } from './isLastDayOfMonth/index.js';\nexport { default as isLeapYear } from './isLeapYear/index.js';\nexport { default as isMatch } from './isMatch/index.js';\nexport { default as isMonday } from './isMonday/index.js';\nexport { default as isPast } from './isPast/index.js';\nexport { default as isSameDay } from './isSameDay/index.js';\nexport { default as isSameHour } from './isSameHour/index.js';\nexport { default as isSameISOWeek } from './isSameISOWeek/index.js';\nexport { default as isSameISOWeekYear } from './isSameISOWeekYear/index.js';\nexport { default as isSameMinute } from './isSameMinute/index.js';\nexport { default as isSameMonth } from './isSameMonth/index.js';\nexport { default as isSameQuarter } from './isSameQuarter/index.js';\nexport { default as isSameSecond } from './isSameSecond/index.js';\nexport { default as isSameWeek } from './isSameWeek/index.js';\nexport { default as isSameYear } from './isSameYear/index.js';\nexport { default as isSaturday } from './isSaturday/index.js';\nexport { default as isSunday } from './isSunday/index.js';\nexport { default as isThisHour } from './isThisHour/index.js';\nexport { default as isThisISOWeek } from './isThisISOWeek/index.js';\nexport { default as isThisMinute } from './isThisMinute/index.js';\nexport { default as isThisMonth } from './isThisMonth/index.js';\nexport { default as isThisQuarter } from './isThisQuarter/index.js';\nexport { default as isThisSecond } from './isThisSecond/index.js';\nexport { default as isThisWeek } from './isThisWeek/index.js';\nexport { default as isThisYear } from './isThisYear/index.js';\nexport { default as isThursday } from './isThursday/index.js';\nexport { default as isToday } from './isToday/index.js';\nexport { default as isTomorrow } from './isTomorrow/index.js';\nexport { default as isTuesday } from './isTuesday/index.js';\nexport { default as isValid } from './isValid/index.js';\nexport { default as isWednesday } from './isWednesday/index.js';\nexport { default as isWeekend } from './isWeekend/index.js';\nexport { default as isWithinInterval } from './isWithinInterval/index.js';\nexport { default as isYesterday } from './isYesterday/index.js';\nexport { default as lastDayOfDecade } from './lastDayOfDecade/index.js';\nexport { default as lastDayOfISOWeek } from './lastDayOfISOWeek/index.js';\nexport { default as lastDayOfISOWeekYear } from './lastDayOfISOWeekYear/index.js';\nexport { default as lastDayOfMonth } from './lastDayOfMonth/index.js';\nexport { default as lastDayOfQuarter } from './lastDayOfQuarter/index.js';\nexport { default as lastDayOfWeek } from './lastDayOfWeek/index.js';\nexport { default as lastDayOfYear } from './lastDayOfYear/index.js';\nexport { default as lightFormat } from './lightFormat/index.js';\nexport { default as max } from './max/index.js';\nexport { default as min } from './min/index.js';\nexport { default as parse } from './parse/index.js';\nexport { default as parseISO } from './parseISO/index.js';\nexport { default as parseJSON } from './parseJSON/index.js';\nexport { default as roundToNearestMinutes } from './roundToNearestMinutes/index.js';\nexport { default as set } from './set/index.js';\nexport { default as setDate } from './setDate/index.js';\nexport { default as setDay } from './setDay/index.js';\nexport { default as setDayOfYear } from './setDayOfYear/index.js';\nexport { default as setHours } from './setHours/index.js';\nexport { default as setISODay } from './setISODay/index.js';\nexport { default as setISOWeek } from './setISOWeek/index.js';\nexport { default as setISOWeekYear } from './setISOWeekYear/index.js';\nexport { default as setMilliseconds } from './setMilliseconds/index.js';\nexport { default as setMinutes } from './setMinutes/index.js';\nexport { default as setMonth } from './setMonth/index.js';\nexport { default as setQuarter } from './setQuarter/index.js';\nexport { default as setSeconds } from './setSeconds/index.js';\nexport { default as setWeek } from './setWeek/index.js';\nexport { default as setWeekYear } from './setWeekYear/index.js';\nexport { default as setYear } from './setYear/index.js';\nexport { default as startOfDay } from './startOfDay/index.js';\nexport { default as startOfDecade } from './startOfDecade/index.js';\nexport { default as startOfHour } from './startOfHour/index.js';\nexport { default as startOfISOWeek } from './startOfISOWeek/index.js';\nexport { default as startOfISOWeekYear } from './startOfISOWeekYear/index.js';\nexport { default as startOfMinute } from './startOfMinute/index.js';\nexport { default as startOfMonth } from './startOfMonth/index.js';\nexport { default as startOfQuarter } from './startOfQuarter/index.js';\nexport { default as startOfSecond } from './startOfSecond/index.js';\nexport { default as startOfToday } from './startOfToday/index.js';\nexport { default as startOfTomorrow } from './startOfTomorrow/index.js';\nexport { default as startOfWeek } from './startOfWeek/index.js';\nexport { default as startOfWeekYear } from './startOfWeekYear/index.js';\nexport { default as startOfYear } from './startOfYear/index.js';\nexport { default as startOfYesterday } from './startOfYesterday/index.js';\nexport { default as sub } from './sub/index.js';\nexport { default as subBusinessDays } from './subBusinessDays/index.js';\nexport { default as subDays } from './subDays/index.js';\nexport { default as subHours } from './subHours/index.js';\nexport { default as subISOWeekYears } from './subISOWeekYears/index.js';\nexport { default as subMilliseconds } from './subMilliseconds/index.js';\nexport { default as subMinutes } from './subMinutes/index.js';\nexport { default as subMonths } from './subMonths/index.js';\nexport { default as subQuarters } from './subQuarters/index.js';\nexport { default as subSeconds } from './subSeconds/index.js';\nexport { default as subWeeks } from './subWeeks/index.js';\nexport { default as subYears } from './subYears/index.js';\nexport { default as toDate } from './toDate/index.js';\nexport * from './constants/index.js';","/**\n * @name endOfYesterday\n * @category Day Helpers\n * @summary Return the end of yesterday.\n * @pure false\n *\n * @description\n * Return the end of yesterday.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of yesterday\n *\n * @example\n * // If today is 6 October 2014:\n * var result = endOfYesterday()\n * //=> Sun Oct 5 2014 23:59:59.999\n */\nexport default function endOfYesterday() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day - 1);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import getISOWeekYear from '../getISOWeekYear/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the end of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the end of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `endOfISOYear` to `endOfISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an ISO week-numbering year for 2 July 2005:\n * var result = endOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Sun Jan 01 2006 23:59:59.999\n */\n\nexport default function endOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  date.setMilliseconds(date.getMilliseconds() - 1);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport isValid from '../isValid/index.js';\nimport addLeadingZeros from '../_lib/addLeadingZeros/index.js';\nvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n/**\n * @name formatRFC7231\n * @category Common Helpers\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\n *\n * @description\n * Return the formatted date string in RFC 7231 format.\n * The result will always be in UTC timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 7231 format:\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\n */\n\nexport default function formatRFC7231(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var dayName = days[originalDate.getUTCDay()];\n  var dayOfMonth = addLeadingZeros(originalDate.getUTCDate(), 2);\n  var monthName = months[originalDate.getUTCMonth()];\n  var year = originalDate.getUTCFullYear();\n  var hour = addLeadingZeros(originalDate.getUTCHours(), 2);\n  var minute = addLeadingZeros(originalDate.getUTCMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getUTCSeconds(), 2); // Result variables.\n\n  return \"\".concat(dayName, \", \").concat(dayOfMonth, \" \").concat(monthName, \" \").concat(year, \" \").concat(hour, \":\").concat(minute, \":\").concat(second, \" GMT\");\n}","import toDate from '../toDate/index.js';\nimport isValid from '../isValid/index.js';\nimport addLeadingZeros from '../_lib/addLeadingZeros/index.js';\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (http://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with time zone, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getMonth\n * @category Month Helpers\n * @summary Get the month of the given date.\n *\n * @description\n * Get the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which month is 29 February 2012?\n * var result = getMonth(new Date(2012, 1, 29))\n * //=> 1\n */\n\nexport default function getMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  return month;\n}","import addQuarters from '../addQuarters/index.js';\nimport startOfQuarter from '../startOfQuarter/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} the array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * var result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\n\nexport default function eachQuarterOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateQuarter = startOfQuarter(startDate);\n  var endDateQuarter = startOfQuarter(endDate);\n  endTime = endDateQuarter.getTime();\n  var quarters = [];\n  var currentQuarter = startDateQuarter;\n\n  while (currentQuarter.getTime() <= endTime) {\n    quarters.push(toDate(currentQuarter));\n    currentQuarter = addQuarters(currentQuarter, 1);\n  }\n\n  return quarters;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * var result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\n\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  return year;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachYearOfInterval\n * @category Interval Helpers\n * @summary Return the array of yearly timestamps within the specified time interval.\n *\n * @description\n * Return the array of yearly timestamps within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} the array with starts of yearly timestamps from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each year between 6 February 2014 and 10 August 2017:\n * var result = eachYearOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2017, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Thu Jan 01 2015 00:00:00,\n * //   Fri Jan 01 2016 00:00:00,\n * //   Sun Jan 01 2017 00:00:00\n * // ]\n */\n\nexport default function eachYearOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setMonth(0, 1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setFullYear(currentDate.getFullYear() + 1);\n  }\n\n  return dates;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import startOfWeek from '../startOfWeek/index.js';\nimport startOfWeekYear from '../startOfWeekYear/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * var result = getISOWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport default function getWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name min\n * @category Common Helpers\n * @summary Return the earliest of the given dates.\n *\n * @description\n * Return the earliest of the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - `min` function now accepts an array of dates rather than spread arguments.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   var date1 = new Date(1989, 6, 10)\n *   var date2 = new Date(1987, 1, 11)\n *   var minDate = min(date1, date2)\n *\n *   // v2.0.0 onward:\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\n *   var minDate = min(dates)\n *   ```\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} the earliest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the earliest?\n * var result = min([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Wed Feb 11 1987 00:00:00\n */\n\nexport default function min(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (result === undefined || result > currentDate || isNaN(currentDate)) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","import assign from '../assign/index.js';\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareDesc\n * @category Common Helpers\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return -1 if the first date is after the second,\n * 1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\n * var result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> 1\n *\n * @example\n * // Sort the array of dates in reverse chronological order:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareDesc)\n * //=> [\n * //   Sun Jul 02 1995 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Wed Feb 11 1987 00:00:00\n * // ]\n */\n\nexport default function compareDesc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff > 0) {\n    return -1;\n  } else if (diff < 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import lastDayOfWeek from '../lastDayOfWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the last day of an ISO week for the given date.\n *\n * @description\n * Return the last day of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of an ISO week for 2 September 2014 11:55:00:\n * var result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function lastDayOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return lastDayOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfWeek\n * @category Week Helpers\n * @summary Return the last day of a week for the given date.\n *\n * @description\n * Return the last day of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the last day of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The last day of a week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:\n * var result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function lastDayOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setHours(0, 0, 0, 0);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isWeekend\n * @category Weekday Helpers\n * @summary Does the given date fall on a weekend?\n *\n * @description\n * Does the given date fall on a weekend?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date falls on a weekend\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Does 5 October 2014 fall on a weekend?\n * var result = isWeekend(new Date(2014, 9, 5))\n * //=> true\n */\n\nexport default function isWeekend(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day === 0 || day === 6;\n}","import toDate from '../toDate/index.js';\nimport setMonth from '../setMonth/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * var result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * var result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nexport default function set(dirtyDate, values) {\n  requiredArgs(2, arguments);\n\n  if (typeof values !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n\n  var date = toDate(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    date = setMonth(date, values.month);\n  }\n\n  if (values.date != null) {\n    date.setDate(toInteger(values.date));\n  }\n\n  if (values.hours != null) {\n    date.setHours(toInteger(values.hours));\n  }\n\n  if (values.minutes != null) {\n    date.setMinutes(toInteger(values.minutes));\n  }\n\n  if (values.seconds != null) {\n    date.setSeconds(toInteger(values.seconds));\n  }\n\n  if (values.milliseconds != null) {\n    date.setMilliseconds(toInteger(values.milliseconds));\n  }\n\n  return date;\n}","import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSunday\n * @category Weekday Helpers\n * @summary Is the given date Sunday?\n *\n * @description\n * Is the given date Sunday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 21 September 2014 Sunday?\n * var result = isSunday(new Date(2014, 8, 21))\n * //=> true\n */\n\nexport default function isSunday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 0;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport addDays from '../addDays/index.js';\nimport getISODay from '../getISODay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday etc.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} day - the day of the ISO week of the new date\n * @returns {Date} the new date with the day of the ISO week set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * var result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function setISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = getISODay(date);\n  var diff = day - currentDay;\n  return addDays(date, diff);\n}","import formatDistance from './_lib/formatDistance/index.js';\nimport formatLong from './_lib/formatLong/index.js';\nimport formatRelative from './_lib/formatRelative/index.js';\nimport localize from './_lib/localize/index.js';\nimport match from './_lib/match/index.js';\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","/**\n * @name startOfTomorrow\n * @category Day Helpers\n * @summary Return the start of tomorrow.\n * @pure false\n *\n * @description\n * Return the start of tomorrow.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `new Date()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the start of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * var result = startOfTomorrow()\n * //=> Tue Oct 7 2014 00:00:00\n */\nexport default function startOfTomorrow() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = now.getMonth();\n  var day = now.getDate();\n  var date = new Date(0);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import differenceInMilliseconds from '../differenceInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * var result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are from 10:01:59 to 10:00:00\n * var result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import addDays from '../addDays/index.js';\nimport isSameDay from '../isSameDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isTomorrow\n * @category Day Helpers\n * @summary Is the given date tomorrow?\n * @pure false\n *\n * @description\n * Is the given date tomorrow?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is tomorrow\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?\n * var result = isTomorrow(new Date(2014, 9, 7, 14, 0))\n * //=> true\n */\n\nexport default function isTomorrow(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, addDays(Date.now(), 1));\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameYear\n * @category Year Helpers\n * @summary Are the given dates in the same year?\n *\n * @description\n * Are the given dates in the same year?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same year\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same year?\n * var result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameYear(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfMonth\n * @category Month Helpers\n * @summary Return the last day of a month for the given date.\n *\n * @description\n * Return the last day of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a month for 2 September 2014 11:55:00:\n * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function lastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport isLeapYear from '../isLeapYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDaysInYear\n * @category Year Helpers\n * @summary Get the number of days in a year of the given date.\n *\n * @description\n * Get the number of days in a year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in 2012?\n * var result = getDaysInYear(new Date(2012, 0, 1))\n * //=> 366\n */\n\nexport default function getDaysInYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n\n  if (isNaN(date)) {\n    return NaN;\n  }\n\n  return isLeapYear(date) ? 366 : 365;\n}","import getDate from '../getDate/index.js';\nimport getDay from '../getDay/index.js';\nimport startOfMonth from '../startOfMonth/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the week of month\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * var result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\n\nexport default function getWeekOfMonth(date, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var currentDayOfMonth = getDate(date);\n\n  if (isNaN(currentDayOfMonth)) {\n    return currentDayOfMonth;\n  }\n\n  var startWeekDay = getDay(startOfMonth(date));\n  var lastDayOfFirstWeek = 0;\n\n  if (startWeekDay >= weekStartsOn) {\n    lastDayOfFirstWeek = weekStartsOn + 7 - startWeekDay;\n  } else {\n    lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  }\n\n  var weekNumber = 1;\n\n  if (currentDayOfMonth > lastDayOfFirstWeek) {\n    var remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n    weekNumber = weekNumber + Math.ceil(remainingDaysAfterFirstWeek / 7);\n  }\n\n  return weekNumber;\n}","import addWeeks from '../addWeeks/index.js';\nimport startOfWeek from '../startOfWeek/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date[]} the array with starts of weeks from the week of the interval start to the week of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be 0, 1, ..., 6\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * var result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\n\nexport default function eachWeekOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateWeek = startOfWeek(startDate, options);\n  var endDateWeek = startOfWeek(endDate, options); // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  endTime = endDateWeek.getTime();\n  var weeks = [];\n  var currentWeek = startDateWeek;\n\n  while (currentWeek.getTime() <= endTime) {\n    currentWeek.setHours(0);\n    weeks.push(toDate(currentWeek));\n    currentWeek = addWeeks(currentWeek, 1);\n    currentWeek.setHours(15);\n  }\n\n  return weeks;\n}","import addDays from '../addDays/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} day - the day of the week of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the new date with the day of the week set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * var result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * var result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\n\nexport default function setDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate, options);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var delta = 7 - weekStartsOn;\n  var diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;\n  return addDays(date, diff, options);\n}","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index];\n  };\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import endOfDay from '../endOfDay/index.js';\n/**\n * @name endOfToday\n * @category Day Helpers\n * @summary Return the end of today.\n * @pure false\n *\n * @description\n * Return the end of today.\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @returns {Date} the end of today\n *\n * @example\n * // If today is 6 October 2014:\n * var result = endOfToday()\n * //=> Mon Oct 6 2014 23:59:59.999\n */\n\nexport default function endOfToday() {\n  return endOfDay(Date.now());\n}","import differenceInMilliseconds from '../differenceInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * var result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_HOUR;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport getDaysInMonth from '../getDaysInMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * var result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport getUTCWeekYear from '../getUTCWeekYear/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date|Number} dateToCompare - the date to compare with\n * @param {Date[]|Number[]} datesArray - the array to search\n * @returns {Date} the date from the array closest to the given date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * var dateToCompare = new Date(2015, 8, 6)\n * var result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\n\nexport default function closestTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n\n  if (isNaN(dateToCompare)) {\n    return new Date(NaN);\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(currentDate)) {\n      result = new Date(NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","import getTime from '../getTime/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * var result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\n\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * var result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * var result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * var result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * var result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport startOfWeekYear from '../startOfWeekYear/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Set the local week-numbering year to the given date.\n *\n * @description\n * Set the local week-numbering year to the given date,\n * saving the week number and the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} weekYear - the local week-numbering year of the new date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the new date with the local week-numbering year set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\n * var result = setWeekYear(new Date(2010, 0, 2), 2004)\n * //=> Sat Jan 03 2004 00:00:00\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010,\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * var result = setWeekYear(new Date(2010, 0, 2), 2004, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sat Jan 01 2005 00:00:00\n */\n\nexport default function setWeekYear(dirtyDate, dirtyWeekYear, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var date = toDate(dirtyDate);\n  var weekYear = toInteger(dirtyWeekYear);\n  var diff = differenceInCalendarDays(date, startOfWeekYear(date, dirtyOptions));\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  date = startOfWeekYear(firstWeek, dirtyOptions);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addISOWeekYears from '../addISOWeekYears/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Subtract the specified number of ISO week-numbering years from the given date.\n *\n * @description\n * Subtract the specified number of ISO week-numbering years from the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `subISOYears` to `subISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `setWeekYear`.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of ISO week-numbering years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the ISO week-numbering years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 ISO week-numbering years from 1 September 2014:\n * var result = subISOWeekYears(new Date(2014, 8, 1), 5)\n * //=> Mon Aug 31 2009 00:00:00\n */\n\nexport default function subISOWeekYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addISOWeekYears(dirtyDate, -amount);\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport getUTCISOWeek from '../getUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * var result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport setMonth from '../setMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setQuarter\n * @category Quarter Helpers\n * @summary Set the year quarter to the given date.\n *\n * @description\n * Set the year quarter to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} quarter - the quarter of the new date\n * @returns {Date} the new date with the quarter set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd quarter to 2 July 2014:\n * var result = setQuarter(new Date(2014, 6, 2), 2)\n * //=> Wed Apr 02 2014 00:00:00\n */\n\nexport default function setQuarter(dirtyDate, dirtyQuarter) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = toInteger(dirtyQuarter);\n  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;\n  var diff = quarter - oldQuarter;\n  return setMonth(date, date.getMonth() + diff * 3);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import differenceInCalendarWeeks from '../differenceInCalendarWeeks/index.js';\nimport lastDayOfMonth from '../lastDayOfMonth/index.js';\nimport startOfMonth from '../startOfMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getWeeksInMonth\n * @category Week Helpers\n * @summary Get the number of calendar weeks a month spans.\n *\n * @description\n * Get the number of calendar weeks the month in the given date spans.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks does February 2015 span?\n * var result = getWeeksInMonth(new Date(2015, 1, 8))\n * //=> 4\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks does July 2017 span?\n * var result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })\n * //=> 6\n */\n\nexport default function getWeeksInMonth(date, options) {\n  requiredArgs(1, arguments);\n  return differenceInCalendarWeeks(lastDayOfMonth(date), startOfMonth(date), options) + 1;\n}","import differenceInMilliseconds from '../differenceInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * var result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import getWeekYear from '../getWeekYear/index.js';\nimport startOfWeek from '../startOfWeek/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the start of a week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * var result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * var result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\n\nexport default function startOfWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  var date = startOfWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfQuarter\n * @category Quarter Helpers\n * @summary Return the end of a year quarter for the given date.\n *\n * @description\n * Return the end of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a quarter for 2 September 2014 11:55:00:\n * var result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3 + 3;\n  date.setMonth(month, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import isSameWeek from '../isSameWeek/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameISOWeek\n * @category ISO Week Helpers\n * @summary Are the given dates in the same ISO week?\n *\n * @description\n * Are the given dates in the same ISO week?\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same ISO week\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 1 September 2014 and 7 September 2014 in the same ISO week?\n * var result = isSameISOWeek(new Date(2014, 8, 1), new Date(2014, 8, 7))\n * //=> true\n */\n\nexport default function isSameISOWeek(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  return isSameWeek(dirtyDateLeft, dirtyDateRight, {\n    weekStartsOn: 1\n  });\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addDays from '../addDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * var result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfHour\n * @category Hour Helpers\n * @summary Return the end of an hour for the given date.\n *\n * @description\n * Return the end of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an hour for 2 September 2014 11:55:00:\n * var result = endOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:59:59.999\n */\n\nexport default function endOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(59, 59, 999);\n  return date;\n}","import startOfMinute from '../startOfMinute/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameMinute\n * @category Minute Helpers\n * @summary Are the given dates in the same minute?\n *\n * @description\n * Are the given dates in the same minute?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same minute\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15\n * // in the same minute?\n * var result = isSameMinute(\n *   new Date(2014, 8, 4, 6, 30),\n *   new Date(2014, 8, 4, 6, 30, 15)\n * )\n * //=> true\n */\n\nexport default function isSameMinute(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfMinute = startOfMinute(dirtyDateLeft);\n  var dateRightStartOfMinute = startOfMinute(dirtyDateRight);\n  return dateLeftStartOfMinute.getTime() === dateRightStartOfMinute.getTime();\n}","import toDate from '../toDate/index.js';\nimport startOfISOWeek from '../startOfISOWeek/index.js';\nimport startOfISOWeekYear from '../startOfISOWeekYear/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\n\nexport default function getISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import isValid from '../isValid/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport formatters from '../_lib/format/formatters/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js'; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addYears from '../addYears/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * var result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setDate\n * @category Day Helpers\n * @summary Set the day of the month to the given date.\n *\n * @description\n * Set the day of the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} dayOfMonth - the day of the month of the new date\n * @returns {Date} the new date with the day of the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 30th day of the month to 1 September 2014:\n * var result = setDate(new Date(2014, 8, 1), 30)\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function setDate(dirtyDate, dirtyDayOfMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = toInteger(dirtyDayOfMonth);\n  date.setDate(dayOfMonth);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * var result = addQuarters(new Date(2014, 8, 1), 1)\n * //=> Mon Dec 01 2014 00:00:00\n */\n\nexport default function addQuarters(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var months = amount * 3;\n  return addMonths(dirtyDate, months);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getOverlappingDaysInRanges` to `getOverlappingDaysInIntervals`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   getOverlappingDaysInRanges(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   getOverlappingDaysInIntervals(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/Interval}\n * @returns {Number} the number of days that overlap in two time intervals\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport default function getOverlappingDaysInIntervals(dirtyIntervalLeft, dirtyIntervalRight) {\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  var overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  var overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  var differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);\n}","import toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import isSameMonth from '../isSameMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisMonth\n * @category Month Helpers\n * @summary Is the given date in the same month as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same month as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 15 September 2014 in this month?\n * var result = isThisMonth(new Date(2014, 8, 15))\n * //=> true\n */\n\nexport default function isThisMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameMonth(Date.now(), dirtyDate);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isFuture\n * @category Common Helpers\n * @summary Is the given date in the future?\n * @pure false\n *\n * @description\n * Is the given date in the future?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the future\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 31 December 2014 in the future?\n * var result = isFuture(new Date(2014, 11, 31))\n * //=> true\n */\n\nexport default function isFuture(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() > Date.now();\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarISOWeekYears from '../differenceInCalendarISOWeekYears/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport subISOWeekYears from '../subISOWeekYears/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of full ISO week-numbering years between the given dates.\n *\n * @description\n * Get the number of full ISO week-numbering years between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `differenceInISOYears` to `differenceInISOWeekYears`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `addWeekYears`.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full ISO week-numbering years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?\n * var result = differenceInISOWeekYears(\n *   new Date(2012, 0, 1),\n *   new Date(2010, 0, 1)\n * )\n * //=> 1\n */\n\nexport default function differenceInISOWeekYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarISOWeekYears(dateLeft, dateRight));\n  dateLeft = subISOWeekYears(dateLeft, sign * difference); // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1\n  // if last calendar ISO year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastISOWeekYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastISOWeekYearNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * var result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\n\nexport default function startOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3;\n  date.setMonth(month, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","export default function buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}","import isSameQuarter from '../isSameQuarter/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isThisQuarter\n * @category Quarter Helpers\n * @summary Is the given date in the same quarter as the current date?\n * @pure false\n *\n * @description\n * Is the given date in the same quarter as the current date?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in this quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 25 September 2014, is 2 July 2014 in this quarter?\n * var result = isThisQuarter(new Date(2014, 6, 2))\n * //=> true\n */\n\nexport default function isThisQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameQuarter(Date.now(), dirtyDate);\n}","/**\n *  Maximum allowed time.\n *  @constant\n *  @type {number}\n *  @default\n */\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n *  Minimum allowed time.\n *  @constant\n *  @type {number}\n *  @default\n */\n\nexport var minTime = -maxTime;","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isFirstDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the first day of a month?\n *\n * @description\n * Is the given date the first day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the first day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 1 September 2014 the first day of a month?\n * var result = isFirstDayOfMonth(new Date(2014, 8, 1))\n * //=> true\n */\n\nexport default function isFirstDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDate() === 1;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name lastDayOfYear\n * @category Year Helpers\n * @summary Return the last day of a year for the given date.\n *\n * @description\n * Return the last day of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a year for 2 September 2014 11:55:00:\n * var result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 00:00:00\n */\n\nexport default function lastDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isMonday\n * @category Weekday Helpers\n * @summary Is the given date Monday?\n *\n * @description\n * Is the given date Monday?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is Monday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 22 September 2014 Monday?\n * var result = isMonday(new Date(2014, 8, 22))\n * //=> true\n */\n\nexport default function isMonday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDay() === 1;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setSeconds\n * @category Second Helpers\n * @summary Set the seconds to the given date.\n *\n * @description\n * Set the seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} seconds - the seconds of the new date\n * @returns {Date} the new date with the seconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 seconds to 1 September 2014 11:30:40:\n * var result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:30:45\n */\n\nexport default function setSeconds(dirtyDate, dirtySeconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = toInteger(dirtySeconds);\n  date.setSeconds(seconds);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name closestIndexTo\n * @category Common Helpers\n * @summary Return an index of the closest date from the array comparing to the given date.\n *\n * @description\n * Return an index of the closest date from the array comparing to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestIndexTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date|Number} dateToCompare - the date to compare with\n * @param {Date[]|Number[]} datesArray - the array to search\n * @returns {Number} an index of the date closest to the given date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015?\n * var dateToCompare = new Date(2015, 8, 6)\n * var datesArray = [\n *   new Date(2015, 0, 1),\n *   new Date(2016, 0, 1),\n *   new Date(2017, 0, 1)\n * ]\n * var result = closestIndexTo(dateToCompare, datesArray)\n * //=> 1\n */\n\nexport default function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n\n  if (isNaN(dateToCompare)) {\n    return NaN;\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate, index) {\n    var currentDate = toDate(dirtyDate);\n\n    if (isNaN(currentDate)) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","export default function buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = findIndex(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n}","import buildFormatLongFn from '../../../_lib/buildFormatLongFn/index.js';\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport getUTCWeek from '../getUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import startOfHour from '../startOfHour/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameHour\n * @category Hour Helpers\n * @summary Are the given dates in the same hour?\n *\n * @description\n * Are the given dates in the same hour?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same hour\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?\n * var result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 6, 30))\n * //=> true\n */\n\nexport default function isSameHour(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfHour = startOfHour(dirtyDateLeft);\n  var dateRightStartOfHour = startOfHour(dirtyDateRight);\n  return dateLeftStartOfHour.getTime() === dateRightStartOfHour.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nexport default function isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}","export default function buildFormatLongFn(args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * var result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}"]}